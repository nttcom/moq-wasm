(function(){"use strict";let t,i;const d={codec:"av01.0.08M.08",width:1920,height:1080,bitrate:25e5,scalabilityMode:"L1T1",framerate:30};function s(){let e=0,o=performance.now();return{addBytes(a){e+=a;const n=performance.now();if(n-o>=1e3){const r=e*8/1e6;console.log(`Encoded bitrate: ${r.toFixed(2)} Mbps`),e=0,o=n}}}}const c=s();function l(e,o){c.addBytes(e.byteLength),self.postMessage({chunk:e,metadata:o})}async function f(){const e={output:l,error:a=>{console.log(a.message)}};console.log("isEncoderConfig Supported",await VideoEncoder.isConfigSupported(d));const o=new VideoEncoder(e);return o.configure(d),o}async function u(e){let o=0;t||(t=await f());const a=e.getReader();for(;;){const n=await a.read();if(n.done)break;const r=n.value;if(t.encodeQueueSize>10)console.error("videoEncoder.encodeQueueSize > 10",t.encodeQueueSize),r.close();else{const g=o%i==0;t.encode(r,{keyFrame:g}),o++,r.close()}}}self.onmessage=async e=>{if(e.data.type==="keyframeInterval")i=e.data.keyframeInterval;else if(e.data.type==="videoStream"){const o=e.data.videoStream;if(!o){console.error("MediaStreamTrack が渡されていません");return}await u(o)}}})();
