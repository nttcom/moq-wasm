version: 2.1

anchors:
  working_directory: &working_directory
    working_directory: ~/repo
  resource_class: &resource_class
    resource_class: medium

jobs:
  rust_linter_and_formatter2:
    docker:
      - image: rust:latest
    steps:
      - checkout
      - run:
          name: Install Rust toolchain and Clippy
          command: |
            rustup component add clippy
            rustup component add rustfmt
      - run:
          name: Run Clippy
          command: |
            cargo clippy -- -D warnings
      - run:
          name: Check code formatting
          command: |
            cargo fmt --check
  unit_test:
    docker:
      - image: rust:latest
    steps:
      - checkout
      - run:
          name: Run Unit Tests
          command: |
            cargo test
  prettier:
    docker:
      - image: cimg/node:21.6.2
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: npm install ./js
      - run:
          name: Check Prettier Formatting
          command: npx prettier --check "js/**/*.{js,jsx,ts,tsx,json,css,md}"
  github_apps_token:
    <<: [*resource_class, *working_directory]
    docker:
      - image: cimg/base:2021.04
    steps:
      - run:
          name: Get GitHub Apps Token
          command: |
            header="$(printf '{"alg":"RS256","typ":"JWT"}' | openssl enc -base64 -A | tr '+/' '-_' | tr -d '=')"

            now="$(date '+%s')"
            iat="$((now - 60))"
            exp="$((now + (3 * 60)))"
            template='{"iss":"%s","iat":%s,"exp":%s}'
            github_app_id="877010" # App ID
            payload="$(printf "${template}" "${github_app_id}" "${iat}" "${exp}" | openssl enc -base64 -A | tr '+/' '-_' | tr -d '=')"

            key="$(echo ${GITHUB_APPS_PEM_BASE64} | base64 --decode)"
            signature="$(printf '%s' "${header}.${payload}" | openssl dgst -binary -sha256 -sign <(printf '%s' "${key}") | openssl enc -base64 -A | tr '+/' '-_' | tr -d '=')"

            jwt="${header}.${payload}.${signature}"

            installation_id="$(curl --location --silent --request GET \
              --url "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/installation" \
              --header "Accept: application/vnd.github+json" \
              --header "X-GitHub-Api-Version: 2022-11-28" \
              --header "Authorization: Bearer ${jwt}" \
              | jq -r '.id'
            )"

            token="$(curl --location --silent --request POST \
              --url "https://api.github.com/app/installations/${installation_id}/access_tokens" \
              --header "Accept: application/vnd.github+json" \
              --header "X-GitHub-Api-Version: 2022-11-28" \
              --header "Authorization: Bearer ${jwt}" \
              | jq -r '.token'
            )"

            echo ${token} > ./githubapps_token
      - persist_to_workspace:
          root: .
          paths:
            - .
  coverage_report:
    <<: [*resource_class, *working_directory]
    docker:
      - image: rust:latest
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Post Coverage Report
          command: |
            cargo install cargo-llvm-cov
            rustup component add llvm-tools-preview
            cov_result=$(cargo llvm-cov | awk '/Filename/,0')
            comment="\`\`\`shell-session
            ${cov_result}
            \`\`\`"

            github_comment_verion=6.0.4
            github_apps_token=$(cat githubapps_token)
            pr_number=$(basename ${CIRCLE_PULL_REQUEST})

            curl -L https://github.com/suzuki-shunsuke/github-comment/releases/download/v${github_comment_verion}/github-comment_${github_comment_verion}_linux_amd64.tar.gz -o linux_amd64.tar.gz
            tar -zxvf linux_amd64.tar.gz
            ./github-comment hide --token ${github_apps_token} --org ${CIRCLE_PROJECT_USERNAME} --repo ${CIRCLE_PROJECT_REPONAME} --pr ${pr_number} --condition 'Comment.HasMeta && Comment.Meta.TemplateKey == "default"'
            ./github-comment post --token ${github_apps_token} --org ${CIRCLE_PROJECT_USERNAME} --repo ${CIRCLE_PROJECT_REPONAME} --pr ${pr_number} --template "${comment}"
workflows:
  version: 2
  build_and_test:
    jobs:
      - rust_linter_and_formatter2:
          filters:
            branches:
              ignore: /main|master/
      - unit_test:
          filters:
            branches:
              ignore: /main|master/
      - prettier:
          filters:
            branches:
              ignore: /main|master/
      - github_apps_token:
          requires:
            - rust_linter_and_formatter2
            - unit_test
            - prettier
          filters:
            branches:
              ignore: /main|master/
      - coverage_report:
          requires:
            - github_apps_token
          filters:
            branches:
              ignore: /main|master/
