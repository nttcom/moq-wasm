<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="645.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="645.00"> </text><svg id="frames" x="10" width="1180" total_samples="21173"><g><title>dyld4::APIs::runAllInitializersForMain() (3 samples, 0.01%)</title><rect x="0.0047%" y="549" width="0.0142%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="3"/><text x="0.2547%" y="559.50"></text></g><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (5 samples, 0.02%)</title><rect x="0.0047%" y="581" width="0.0236%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="5"/><text x="0.2547%" y="591.50"></text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, mach_o::Header const*) (5 samples, 0.02%)</title><rect x="0.0047%" y="565" width="0.0236%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="5"/><text x="0.2547%" y="575.50"></text></g><g><title>start (9 samples, 0.04%)</title><rect x="0.0000%" y="597" width="0.0425%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="9"/><text x="0.2500%" y="607.50"></text></g><g><title>main (3 samples, 0.01%)</title><rect x="0.0283%" y="581" width="0.0142%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="3"/><text x="0.2783%" y="591.50"></text></g><g><title>std::rt::lang_start_internal (3 samples, 0.01%)</title><rect x="0.0283%" y="565" width="0.0142%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="3"/><text x="0.2783%" y="575.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (3 samples, 0.01%)</title><rect x="0.0283%" y="549" width="0.0142%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="3"/><text x="0.2783%" y="559.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (3 samples, 0.01%)</title><rect x="0.0283%" y="533" width="0.0142%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="3"/><text x="0.2783%" y="543.50"></text></g><g><title>moqt_server_sample::main (3 samples, 0.01%)</title><rect x="0.0283%" y="517" width="0.0142%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="3"/><text x="0.2783%" y="527.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (3 samples, 0.01%)</title><rect x="0.0283%" y="501" width="0.0142%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="3"/><text x="0.2783%" y="511.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.01%)</title><rect x="0.0283%" y="485" width="0.0142%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="3"/><text x="0.2783%" y="495.50"></text></g><g><title>pow (8 samples, 0.04%)</title><rect x="0.4629%" y="405" width="0.0378%" height="15" fill="rgb(240,193,28)" fg:x="98" fg:w="8"/><text x="0.7129%" y="415.50"></text></g><g><title>DYLD-STUB$$mach_timebase_info (4 samples, 0.02%)</title><rect x="0.5715%" y="357" width="0.0189%" height="15" fill="rgb(216,20,37)" fg:x="121" fg:w="4"/><text x="0.8215%" y="367.50"></text></g><g><title>mach_absolute_time (47 samples, 0.22%)</title><rect x="0.5904%" y="357" width="0.2220%" height="15" fill="rgb(206,188,39)" fg:x="125" fg:w="47"/><text x="0.8404%" y="367.50"></text></g><g><title>clock_gettime_nsec_np (58 samples, 0.27%)</title><rect x="0.5526%" y="373" width="0.2739%" height="15" fill="rgb(217,207,13)" fg:x="117" fg:w="58"/><text x="0.8026%" y="383.50"></text></g><g><title>mach_timebase_info (3 samples, 0.01%)</title><rect x="0.8124%" y="357" width="0.0142%" height="15" fill="rgb(231,73,38)" fg:x="172" fg:w="3"/><text x="1.0624%" y="367.50"></text></g><g><title>mach_absolute_time (12 samples, 0.06%)</title><rect x="0.8265%" y="373" width="0.0567%" height="15" fill="rgb(225,20,46)" fg:x="175" fg:w="12"/><text x="1.0765%" y="383.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (82 samples, 0.39%)</title><rect x="0.5006%" y="405" width="0.3873%" height="15" fill="rgb(210,31,41)" fg:x="106" fg:w="82"/><text x="0.7506%" y="415.50"></text></g><g><title>clock_gettime (74 samples, 0.35%)</title><rect x="0.5384%" y="389" width="0.3495%" height="15" fill="rgb(221,200,47)" fg:x="114" fg:w="74"/><text x="0.7884%" y="399.50"></text></g><g><title>mach_absolute_time (7 samples, 0.03%)</title><rect x="0.9257%" y="341" width="0.0331%" height="15" fill="rgb(226,26,5)" fg:x="196" fg:w="7"/><text x="1.1757%" y="351.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (14 samples, 0.07%)</title><rect x="0.8974%" y="389" width="0.0661%" height="15" fill="rgb(249,33,26)" fg:x="190" fg:w="14"/><text x="1.1474%" y="399.50"></text></g><g><title>clock_gettime (13 samples, 0.06%)</title><rect x="0.9021%" y="373" width="0.0614%" height="15" fill="rgb(235,183,28)" fg:x="191" fg:w="13"/><text x="1.1521%" y="383.50"></text></g><g><title>clock_gettime_nsec_np (11 samples, 0.05%)</title><rect x="0.9115%" y="357" width="0.0520%" height="15" fill="rgb(221,5,38)" fg:x="193" fg:w="11"/><text x="1.1615%" y="367.50"></text></g><g><title>std::time::Instant::elapsed (19 samples, 0.09%)</title><rect x="0.8879%" y="405" width="0.0897%" height="15" fill="rgb(247,18,42)" fg:x="188" fg:w="19"/><text x="1.1379%" y="415.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (3 samples, 0.01%)</title><rect x="0.9635%" y="389" width="0.0142%" height="15" fill="rgb(241,131,45)" fg:x="204" fg:w="3"/><text x="1.2135%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::unpark_worker_by_id (5 samples, 0.02%)</title><rect x="0.9871%" y="405" width="0.0236%" height="15" fill="rgb(249,31,29)" fg:x="209" fg:w="5"/><text x="1.2371%" y="415.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (33 samples, 0.16%)</title><rect x="1.0107%" y="405" width="0.1559%" height="15" fill="rgb(225,111,53)" fg:x="214" fg:w="33"/><text x="1.2607%" y="415.50"></text></g><g><title>__psynch_cvsignal (4 samples, 0.02%)</title><rect x="1.4594%" y="373" width="0.0189%" height="15" fill="rgb(238,160,17)" fg:x="309" fg:w="4"/><text x="1.7094%" y="383.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (4 samples, 0.02%)</title><rect x="1.4783%" y="373" width="0.0189%" height="15" fill="rgb(214,148,48)" fg:x="313" fg:w="4"/><text x="1.7283%" y="383.50"></text></g><g><title>__psynch_cvsignal (29 samples, 0.14%)</title><rect x="1.5019%" y="357" width="0.1370%" height="15" fill="rgb(232,36,49)" fg:x="318" fg:w="29"/><text x="1.7519%" y="367.50"></text></g><g><title>pthread_cond_signal (31 samples, 0.15%)</title><rect x="1.4972%" y="373" width="0.1464%" height="15" fill="rgb(209,103,24)" fg:x="317" fg:w="31"/><text x="1.7472%" y="383.50"></text></g><g><title>clock_gettime_nsec_np (3 samples, 0.01%)</title><rect x="1.6436%" y="341" width="0.0142%" height="15" fill="rgb(229,88,8)" fg:x="348" fg:w="3"/><text x="1.8936%" y="351.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (46 samples, 0.22%)</title><rect x="1.4452%" y="389" width="0.2173%" height="15" fill="rgb(213,181,19)" fg:x="306" fg:w="46"/><text x="1.6952%" y="399.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (4 samples, 0.02%)</title><rect x="1.6436%" y="373" width="0.0189%" height="15" fill="rgb(254,191,54)" fg:x="348" fg:w="4"/><text x="1.8936%" y="383.50"></text></g><g><title>clock_gettime (4 samples, 0.02%)</title><rect x="1.6436%" y="357" width="0.0189%" height="15" fill="rgb(241,83,37)" fg:x="348" fg:w="4"/><text x="1.8936%" y="367.50"></text></g><g><title>__psynch_cvwait (70 samples, 0.33%)</title><rect x="1.7711%" y="373" width="0.3306%" height="15" fill="rgb(233,36,39)" fg:x="375" fg:w="70"/><text x="2.0211%" y="383.50"></text></g><g><title>__psynch_cvwait (351 samples, 1.66%)</title><rect x="2.1631%" y="357" width="1.6578%" height="15" fill="rgb(226,3,54)" fg:x="458" fg:w="351"/><text x="2.4131%" y="367.50"></text></g><g><title>_pthread_mutex_droplock (5 samples, 0.02%)</title><rect x="3.8209%" y="357" width="0.0236%" height="15" fill="rgb(245,192,40)" fg:x="809" fg:w="5"/><text x="4.0709%" y="367.50"></text></g><g><title>_pthread_mutex_firstfit_lock_slow (4 samples, 0.02%)</title><rect x="3.8445%" y="357" width="0.0189%" height="15" fill="rgb(238,167,29)" fg:x="814" fg:w="4"/><text x="4.0945%" y="367.50"></text></g><g><title>_pthread_mutex_firstfit_lock_wait (4 samples, 0.02%)</title><rect x="3.8445%" y="341" width="0.0189%" height="15" fill="rgb(232,182,51)" fg:x="814" fg:w="4"/><text x="4.0945%" y="351.50"></text></g><g><title>__psynch_mutexwait (4 samples, 0.02%)</title><rect x="3.8445%" y="325" width="0.0189%" height="15" fill="rgb(231,60,39)" fg:x="814" fg:w="4"/><text x="4.0945%" y="335.50"></text></g><g><title>_pthread_cond_wait (381 samples, 1.80%)</title><rect x="2.1017%" y="373" width="1.7995%" height="15" fill="rgb(208,69,12)" fg:x="445" fg:w="381"/><text x="2.3517%" y="383.50">_..</text></g><g><title>pthread_testcancel (7 samples, 0.03%)</title><rect x="3.8681%" y="357" width="0.0331%" height="15" fill="rgb(235,93,37)" fg:x="819" fg:w="7"/><text x="4.1181%" y="367.50"></text></g><g><title>_tlv_get_addr (5 samples, 0.02%)</title><rect x="3.9012%" y="373" width="0.0236%" height="15" fill="rgb(213,116,39)" fg:x="826" fg:w="5"/><text x="4.1512%" y="383.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (483 samples, 2.28%)</title><rect x="1.6625%" y="389" width="2.2812%" height="15" fill="rgb(222,207,29)" fg:x="352" fg:w="483"/><text x="1.9125%" y="399.50">p..</text></g><g><title>tokio::runtime::driver::Driver::park (3 samples, 0.01%)</title><rect x="3.9484%" y="389" width="0.0142%" height="15" fill="rgb(206,96,30)" fg:x="836" fg:w="3"/><text x="4.1984%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (4 samples, 0.02%)</title><rect x="3.9673%" y="389" width="0.0189%" height="15" fill="rgb(218,138,4)" fg:x="840" fg:w="4"/><text x="4.2173%" y="399.50"></text></g><g><title>DYLD-STUB$$clock_gettime (7 samples, 0.03%)</title><rect x="4.1043%" y="357" width="0.0331%" height="15" fill="rgb(250,191,14)" fg:x="869" fg:w="7"/><text x="4.3543%" y="367.50"></text></g><g><title>DYLD-STUB$$mach_timebase_info (4 samples, 0.02%)</title><rect x="4.2082%" y="325" width="0.0189%" height="15" fill="rgb(239,60,40)" fg:x="891" fg:w="4"/><text x="4.4582%" y="335.50"></text></g><g><title>mach_absolute_time (47 samples, 0.22%)</title><rect x="4.2271%" y="325" width="0.2220%" height="15" fill="rgb(206,27,48)" fg:x="895" fg:w="47"/><text x="4.4771%" y="335.50"></text></g><g><title>clock_gettime_nsec_np (69 samples, 0.33%)</title><rect x="4.1657%" y="341" width="0.3259%" height="15" fill="rgb(225,35,8)" fg:x="882" fg:w="69"/><text x="4.4157%" y="351.50"></text></g><g><title>mach_timebase_info (9 samples, 0.04%)</title><rect x="4.4491%" y="325" width="0.0425%" height="15" fill="rgb(250,213,24)" fg:x="942" fg:w="9"/><text x="4.6991%" y="335.50"></text></g><g><title>clock_gettime (78 samples, 0.37%)</title><rect x="4.1373%" y="357" width="0.3684%" height="15" fill="rgb(247,123,22)" fg:x="876" fg:w="78"/><text x="4.3873%" y="367.50"></text></g><g><title>mach_absolute_time (3 samples, 0.01%)</title><rect x="4.4916%" y="341" width="0.0142%" height="15" fill="rgb(231,138,38)" fg:x="951" fg:w="3"/><text x="4.7416%" y="351.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (90 samples, 0.43%)</title><rect x="4.0854%" y="373" width="0.4251%" height="15" fill="rgb(231,145,46)" fg:x="865" fg:w="90"/><text x="4.3354%" y="383.50"></text></g><g><title>std::time::Instant::now (5 samples, 0.02%)</title><rect x="4.5199%" y="373" width="0.0236%" height="15" fill="rgb(251,118,11)" fg:x="957" fg:w="5"/><text x="4.7699%" y="383.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (14 samples, 0.07%)</title><rect x="4.5435%" y="373" width="0.0661%" height="15" fill="rgb(217,147,25)" fg:x="962" fg:w="14"/><text x="4.7935%" y="383.50"></text></g><g><title>kevent (227 samples, 1.07%)</title><rect x="4.7938%" y="357" width="1.0721%" height="15" fill="rgb(247,81,37)" fg:x="1015" fg:w="227"/><text x="5.0438%" y="367.50"></text></g><g><title>mio::poll::Poll::poll (2,460 samples, 11.62%)</title><rect x="5.8660%" y="357" width="11.6186%" height="15" fill="rgb(209,12,38)" fg:x="1242" fg:w="2460"/><text x="6.1160%" y="367.50">mio::poll::Poll::..</text></g><g><title>kevent (2,441 samples, 11.53%)</title><rect x="5.9557%" y="341" width="11.5288%" height="15" fill="rgb(227,1,9)" fg:x="1261" fg:w="2441"/><text x="6.2057%" y="351.50">kevent</text></g><g><title>_tlv_get_addr (4 samples, 0.02%)</title><rect x="17.5176%" y="293" width="0.0189%" height="15" fill="rgb(248,47,43)" fg:x="3709" fg:w="4"/><text x="17.7676%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (6 samples, 0.03%)</title><rect x="17.5129%" y="325" width="0.0283%" height="15" fill="rgb(221,10,30)" fg:x="3708" fg:w="6"/><text x="17.7629%" y="335.50"></text></g><g><title>tokio::runtime::context::with_scheduler (6 samples, 0.03%)</title><rect x="17.5129%" y="309" width="0.0283%" height="15" fill="rgb(210,229,1)" fg:x="3708" fg:w="6"/><text x="17.7629%" y="319.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (2,740 samples, 12.94%)</title><rect x="4.6096%" y="373" width="12.9410%" height="15" fill="rgb(222,148,37)" fg:x="976" fg:w="2740"/><text x="4.8596%" y="383.50">tokio::runtime::io:..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (14 samples, 0.07%)</title><rect x="17.4845%" y="357" width="0.0661%" height="15" fill="rgb(234,67,33)" fg:x="3702" fg:w="14"/><text x="17.7345%" y="367.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (9 samples, 0.04%)</title><rect x="17.5081%" y="341" width="0.0425%" height="15" fill="rgb(247,98,35)" fg:x="3707" fg:w="9"/><text x="17.7581%" y="351.50"></text></g><g><title>tokio::runtime::signal::Driver::process (11 samples, 0.05%)</title><rect x="17.5507%" y="373" width="0.0520%" height="15" fill="rgb(247,138,52)" fg:x="3716" fg:w="11"/><text x="17.8007%" y="383.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (2,885 samples, 13.63%)</title><rect x="3.9957%" y="389" width="13.6258%" height="15" fill="rgb(213,79,30)" fg:x="846" fg:w="2885"/><text x="4.2457%" y="399.50">tokio::runtime::time:..</text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (4 samples, 0.02%)</title><rect x="17.6026%" y="373" width="0.0189%" height="15" fill="rgb(246,177,23)" fg:x="3727" fg:w="4"/><text x="17.8526%" y="383.50"></text></g><g><title>_tlv_get_addr (5 samples, 0.02%)</title><rect x="17.6923%" y="325" width="0.0236%" height="15" fill="rgb(230,62,27)" fg:x="3746" fg:w="5"/><text x="17.9423%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (12 samples, 0.06%)</title><rect x="17.6687%" y="357" width="0.0567%" height="15" fill="rgb(216,154,8)" fg:x="3741" fg:w="12"/><text x="17.9187%" y="367.50"></text></g><g><title>tokio::runtime::context::with_scheduler (10 samples, 0.05%)</title><rect x="17.6782%" y="341" width="0.0472%" height="15" fill="rgb(244,35,45)" fg:x="3743" fg:w="10"/><text x="17.9282%" y="351.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (20 samples, 0.09%)</title><rect x="17.6546%" y="373" width="0.0945%" height="15" fill="rgb(251,115,12)" fg:x="3738" fg:w="20"/><text x="17.9046%" y="383.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (4 samples, 0.02%)</title><rect x="17.7301%" y="357" width="0.0189%" height="15" fill="rgb(240,54,50)" fg:x="3754" fg:w="4"/><text x="17.9801%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (3,530 samples, 16.67%)</title><rect x="1.1666%" y="405" width="16.6722%" height="15" fill="rgb(233,84,52)" fg:x="247" fg:w="3530"/><text x="1.4166%" y="415.50">tokio::runtime::scheduler:..</text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (46 samples, 0.22%)</title><rect x="17.6215%" y="389" width="0.2173%" height="15" fill="rgb(207,117,47)" fg:x="3731" fg:w="46"/><text x="17.8715%" y="399.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (19 samples, 0.09%)</title><rect x="17.7490%" y="373" width="0.0897%" height="15" fill="rgb(249,43,39)" fg:x="3758" fg:w="19"/><text x="17.9990%" y="383.50"></text></g><g><title>kevent (5 samples, 0.02%)</title><rect x="17.9143%" y="373" width="0.0236%" height="15" fill="rgb(209,38,44)" fg:x="3793" fg:w="5"/><text x="18.1643%" y="383.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (48 samples, 0.23%)</title><rect x="17.9143%" y="389" width="0.2267%" height="15" fill="rgb(236,212,23)" fg:x="3793" fg:w="48"/><text x="18.1643%" y="399.50"></text></g><g><title>mio::waker::Waker::wake (43 samples, 0.20%)</title><rect x="17.9379%" y="373" width="0.2031%" height="15" fill="rgb(242,79,21)" fg:x="3798" fg:w="43"/><text x="18.1879%" y="383.50"></text></g><g><title>kevent (43 samples, 0.20%)</title><rect x="17.9379%" y="357" width="0.2031%" height="15" fill="rgb(211,96,35)" fg:x="3798" fg:w="43"/><text x="18.1879%" y="367.50"></text></g><g><title>_tlv_get_addr (5 samples, 0.02%)</title><rect x="18.1410%" y="389" width="0.0236%" height="15" fill="rgb(253,215,40)" fg:x="3841" fg:w="5"/><text x="18.3910%" y="399.50"></text></g><g><title>__psynch_cvsignal (16 samples, 0.08%)</title><rect x="18.1883%" y="373" width="0.0756%" height="15" fill="rgb(211,81,21)" fg:x="3851" fg:w="16"/><text x="18.4383%" y="383.50"></text></g><g><title>__psynch_cvsignal (116 samples, 0.55%)</title><rect x="18.2733%" y="357" width="0.5479%" height="15" fill="rgb(208,190,38)" fg:x="3869" fg:w="116"/><text x="18.5233%" y="367.50"></text></g><g><title>pthread_cond_signal (117 samples, 0.55%)</title><rect x="18.2733%" y="373" width="0.5526%" height="15" fill="rgb(235,213,38)" fg:x="3869" fg:w="117"/><text x="18.5233%" y="383.50"></text></g><g><title>clock_gettime_nsec_np (9 samples, 0.04%)</title><rect x="18.8306%" y="341" width="0.0425%" height="15" fill="rgb(237,122,38)" fg:x="3987" fg:w="9"/><text x="19.0806%" y="351.50"></text></g><g><title>mach_absolute_time (9 samples, 0.04%)</title><rect x="18.8306%" y="325" width="0.0425%" height="15" fill="rgb(244,218,35)" fg:x="3987" fg:w="9"/><text x="19.0806%" y="335.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (151 samples, 0.71%)</title><rect x="18.1646%" y="389" width="0.7132%" height="15" fill="rgb(240,68,47)" fg:x="3846" fg:w="151"/><text x="18.4146%" y="399.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (11 samples, 0.05%)</title><rect x="18.8259%" y="373" width="0.0520%" height="15" fill="rgb(210,16,53)" fg:x="3986" fg:w="11"/><text x="19.0759%" y="383.50"></text></g><g><title>clock_gettime (10 samples, 0.05%)</title><rect x="18.8306%" y="357" width="0.0472%" height="15" fill="rgb(235,124,12)" fg:x="3987" fg:w="10"/><text x="19.0806%" y="367.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (8 samples, 0.04%)</title><rect x="19.0195%" y="357" width="0.0378%" height="15" fill="rgb(224,169,11)" fg:x="4027" fg:w="8"/><text x="19.2695%" y="367.50"></text></g><g><title>_tlv_get_addr (5 samples, 0.02%)</title><rect x="19.0337%" y="341" width="0.0236%" height="15" fill="rgb(250,166,2)" fg:x="4030" fg:w="5"/><text x="19.2837%" y="351.50"></text></g><g><title>&lt;tokio::runtime::io::scheduled_io::Readiness as core::future::future::Future&gt;::poll (5 samples, 0.02%)</title><rect x="19.3076%" y="309" width="0.0236%" height="15" fill="rgb(242,216,29)" fg:x="4088" fg:w="5"/><text x="19.5576%" y="319.50"></text></g><g><title>&lt;tokio::runtime::io::scheduled_io::Readiness as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="19.3312%" y="309" width="0.0142%" height="15" fill="rgb(230,116,27)" fg:x="4093" fg:w="3"/><text x="19.5812%" y="319.50"></text></g><g><title>&lt;quinn::runtime::UdpPollHelper&lt;MakeFut,Fut&gt; as quinn::runtime::UdpPoller&gt;::poll_writable (17 samples, 0.08%)</title><rect x="19.2698%" y="325" width="0.0803%" height="15" fill="rgb(228,99,48)" fg:x="4080" fg:w="17"/><text x="19.5198%" y="335.50"></text></g><g><title>__sendmsg (607 samples, 2.87%)</title><rect x="19.4399%" y="277" width="2.8669%" height="15" fill="rgb(253,11,6)" fg:x="4116" fg:w="607"/><text x="19.6899%" y="287.50">__..</text></g><g><title>quinn_udp::imp::UdpSocketState::send (6,732 samples, 31.80%)</title><rect x="19.4068%" y="293" width="31.7952%" height="15" fill="rgb(247,143,39)" fg:x="4109" fg:w="6732"/><text x="19.6568%" y="303.50">quinn_udp::imp::UdpSocketState::send</text></g><g><title>quinn_udp::imp::send (6,118 samples, 28.90%)</title><rect x="22.3067%" y="277" width="28.8953%" height="15" fill="rgb(236,97,10)" fg:x="4723" fg:w="6118"/><text x="22.5567%" y="287.50">quinn_udp::imp::send</text></g><g><title>__sendmsg (6,109 samples, 28.85%)</title><rect x="22.3492%" y="261" width="28.8528%" height="15" fill="rgb(233,208,19)" fg:x="4732" fg:w="6109"/><text x="22.5992%" y="271.50">__sendmsg</text></g><g><title>&lt;quinn::runtime::tokio::UdpSocket as quinn::runtime::AsyncUdpSocket&gt;::try_send (6,748 samples, 31.87%)</title><rect x="19.3596%" y="325" width="31.8708%" height="15" fill="rgb(216,164,2)" fg:x="4099" fg:w="6748"/><text x="19.6096%" y="335.50">&lt;quinn::runtime::tokio::UdpSocket as quinn::runtime:..</text></g><g><title>tokio::runtime::io::registration::Registration::try_io (6,748 samples, 31.87%)</title><rect x="19.3596%" y="309" width="31.8708%" height="15" fill="rgb(220,129,5)" fg:x="4099" fg:w="6748"/><text x="19.6096%" y="319.50">tokio::runtime::io::registration::Registration::try_..</text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (7 samples, 0.03%)</title><rect x="51.2351%" y="325" width="0.0331%" height="15" fill="rgb(242,17,10)" fg:x="10848" fg:w="7"/><text x="51.4851%" y="335.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::poll_elapsed (3 samples, 0.01%)</title><rect x="51.2540%" y="309" width="0.0142%" height="15" fill="rgb(242,107,0)" fg:x="10852" fg:w="3"/><text x="51.5040%" y="319.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (3 samples, 0.01%)</title><rect x="51.2540%" y="293" width="0.0142%" height="15" fill="rgb(251,28,31)" fg:x="10852" fg:w="3"/><text x="51.5040%" y="303.50"></text></g><g><title>&lt;tracing_subscriber::filter::layer_filters::Filtered&lt;L,F,S&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (13 samples, 0.06%)</title><rect x="51.2681%" y="325" width="0.0614%" height="15" fill="rgb(233,223,10)" fg:x="10855" fg:w="13"/><text x="51.5181%" y="335.50"></text></g><g><title>tracing_subscriber::filter::env::EnvFilter::cares_about_span (6 samples, 0.03%)</title><rect x="51.3012%" y="309" width="0.0283%" height="15" fill="rgb(215,21,27)" fg:x="10862" fg:w="6"/><text x="51.5512%" y="319.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (3 samples, 0.01%)</title><rect x="51.3390%" y="325" width="0.0142%" height="15" fill="rgb(232,23,21)" fg:x="10870" fg:w="3"/><text x="51.5890%" y="335.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (4 samples, 0.02%)</title><rect x="51.3531%" y="309" width="0.0189%" height="15" fill="rgb(244,5,23)" fg:x="10873" fg:w="4"/><text x="51.6031%" y="319.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enter (11 samples, 0.05%)</title><rect x="51.3531%" y="325" width="0.0520%" height="15" fill="rgb(226,81,46)" fg:x="10873" fg:w="11"/><text x="51.6031%" y="335.50"></text></g><g><title>tracing_subscriber::layer::context::Context&lt;S&gt;::if_enabled_for (5 samples, 0.02%)</title><rect x="51.3815%" y="309" width="0.0236%" height="15" fill="rgb(247,70,30)" fg:x="10879" fg:w="5"/><text x="51.6315%" y="319.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_subscriber::registry::LookupSpan&gt;::span_data (4 samples, 0.02%)</title><rect x="51.3862%" y="293" width="0.0189%" height="15" fill="rgb(212,68,19)" fg:x="10880" fg:w="4"/><text x="51.6362%" y="303.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (4 samples, 0.02%)</title><rect x="51.4193%" y="293" width="0.0189%" height="15" fill="rgb(240,187,13)" fg:x="10887" fg:w="4"/><text x="51.6693%" y="303.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (3 samples, 0.01%)</title><rect x="51.4240%" y="277" width="0.0142%" height="15" fill="rgb(223,113,26)" fg:x="10888" fg:w="3"/><text x="51.6740%" y="287.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::exit (14 samples, 0.07%)</title><rect x="51.4051%" y="325" width="0.0661%" height="15" fill="rgb(206,192,2)" fg:x="10884" fg:w="14"/><text x="51.6551%" y="335.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (12 samples, 0.06%)</title><rect x="51.4145%" y="309" width="0.0567%" height="15" fill="rgb(241,108,4)" fg:x="10886" fg:w="12"/><text x="51.6645%" y="319.50"></text></g><g><title>tracing_core::dispatcher::get_default (3 samples, 0.01%)</title><rect x="51.4570%" y="293" width="0.0142%" height="15" fill="rgb(247,173,49)" fg:x="10895" fg:w="3"/><text x="51.7070%" y="303.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (4 samples, 0.02%)</title><rect x="51.5043%" y="277" width="0.0189%" height="15" fill="rgb(224,114,35)" fg:x="10905" fg:w="4"/><text x="51.7543%" y="287.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (4 samples, 0.02%)</title><rect x="51.5043%" y="261" width="0.0189%" height="15" fill="rgb(245,159,27)" fg:x="10905" fg:w="4"/><text x="51.7543%" y="271.50"></text></g><g><title>_szone_free (3 samples, 0.01%)</title><rect x="51.5562%" y="261" width="0.0142%" height="15" fill="rgb(245,172,44)" fg:x="10916" fg:w="3"/><text x="51.8062%" y="271.50"></text></g><g><title>get_tiny_previous_free_msize (3 samples, 0.01%)</title><rect x="51.6271%" y="229" width="0.0142%" height="15" fill="rgb(236,23,11)" fg:x="10931" fg:w="3"/><text x="51.8771%" y="239.50"></text></g><g><title>tiny_free_list_add_ptr (7 samples, 0.03%)</title><rect x="51.6412%" y="229" width="0.0331%" height="15" fill="rgb(205,117,38)" fg:x="10934" fg:w="7"/><text x="51.8912%" y="239.50"></text></g><g><title>free_tiny (22 samples, 0.10%)</title><rect x="51.5751%" y="261" width="0.1039%" height="15" fill="rgb(237,72,25)" fg:x="10920" fg:w="22"/><text x="51.8251%" y="271.50"></text></g><g><title>tiny_free_no_lock (13 samples, 0.06%)</title><rect x="51.6176%" y="245" width="0.0614%" height="15" fill="rgb(244,70,9)" fg:x="10929" fg:w="13"/><text x="51.8676%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (33 samples, 0.16%)</title><rect x="51.5279%" y="277" width="0.1559%" height="15" fill="rgb(217,125,39)" fg:x="10910" fg:w="33"/><text x="51.7779%" y="287.50"></text></g><g><title>sharded_slab::page::slot::Slot&lt;T,C&gt;::release_with (43 samples, 0.20%)</title><rect x="51.4996%" y="309" width="0.2031%" height="15" fill="rgb(235,36,10)" fg:x="10904" fg:w="43"/><text x="51.7496%" y="319.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (42 samples, 0.20%)</title><rect x="51.5043%" y="293" width="0.1984%" height="15" fill="rgb(251,123,47)" fg:x="10905" fg:w="42"/><text x="51.7543%" y="303.50"></text></g><g><title>tracing_core::dispatcher::get_default (3 samples, 0.01%)</title><rect x="51.6885%" y="277" width="0.0142%" height="15" fill="rgb(221,13,13)" fg:x="10944" fg:w="3"/><text x="51.9385%" y="287.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (52 samples, 0.25%)</title><rect x="51.4807%" y="325" width="0.2456%" height="15" fill="rgb(238,131,9)" fg:x="10900" fg:w="52"/><text x="51.7307%" y="335.50"></text></g><g><title>__psynch_mutexdrop (8 samples, 0.04%)</title><rect x="51.7404%" y="309" width="0.0378%" height="15" fill="rgb(211,50,8)" fg:x="10955" fg:w="8"/><text x="51.9904%" y="319.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (61 samples, 0.29%)</title><rect x="51.7263%" y="325" width="0.2881%" height="15" fill="rgb(245,182,24)" fg:x="10952" fg:w="61"/><text x="51.9763%" y="335.50"></text></g><g><title>_pthread_mutex_firstfit_wake (50 samples, 0.24%)</title><rect x="51.7782%" y="309" width="0.2361%" height="15" fill="rgb(242,14,37)" fg:x="10963" fg:w="50"/><text x="52.0282%" y="319.50"></text></g><g><title>__psynch_mutexdrop (50 samples, 0.24%)</title><rect x="51.7782%" y="293" width="0.2361%" height="15" fill="rgb(246,228,12)" fg:x="10963" fg:w="50"/><text x="52.0282%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (10 samples, 0.05%)</title><rect x="52.0191%" y="325" width="0.0472%" height="15" fill="rgb(213,55,15)" fg:x="11014" fg:w="10"/><text x="52.2691%" y="335.50"></text></g><g><title>quinn_proto::connection::Connection::reset_idle_timeout (6 samples, 0.03%)</title><rect x="52.4489%" y="277" width="0.0283%" height="15" fill="rgb(209,9,3)" fg:x="11105" fg:w="6"/><text x="52.6989%" y="287.50"></text></g><g><title>quinn_proto::connection::Connection::on_packet_authenticated (14 samples, 0.07%)</title><rect x="52.4394%" y="293" width="0.0661%" height="15" fill="rgb(230,59,30)" fg:x="11103" fg:w="14"/><text x="52.6894%" y="303.50"></text></g><g><title>quinn_proto::range_set::array_range_set::ArrayRangeSet::insert (6 samples, 0.03%)</title><rect x="52.4772%" y="277" width="0.0283%" height="15" fill="rgb(209,121,21)" fg:x="11111" fg:w="6"/><text x="52.7272%" y="287.50"></text></g><g><title>&lt;quinn_proto::varint::VarInt as quinn_proto::coding::Codec&gt;::decode (14 samples, 0.07%)</title><rect x="52.7748%" y="245" width="0.0661%" height="15" fill="rgb(220,109,13)" fg:x="11174" fg:w="14"/><text x="53.0248%" y="255.50"></text></g><g><title>&lt;quinn_proto::frame::Iter as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.11%)</title><rect x="52.7323%" y="261" width="0.1134%" height="15" fill="rgb(232,18,1)" fg:x="11165" fg:w="24"/><text x="52.9823%" y="271.50"></text></g><g><title>bytes::bytes::static_drop (4 samples, 0.02%)</title><rect x="52.8503%" y="261" width="0.0189%" height="15" fill="rgb(215,41,42)" fg:x="11190" fg:w="4"/><text x="53.1003%" y="271.50"></text></g><g><title>_platform_memmove (6 samples, 0.03%)</title><rect x="53.0676%" y="197" width="0.0283%" height="15" fill="rgb(224,123,36)" fg:x="11236" fg:w="6"/><text x="53.3176%" y="207.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::bulk_steal_right (5 samples, 0.02%)</title><rect x="53.1006%" y="197" width="0.0236%" height="15" fill="rgb(240,125,3)" fg:x="11243" fg:w="5"/><text x="53.3506%" y="207.50"></text></g><g><title>free_small (10 samples, 0.05%)</title><rect x="53.1432%" y="181" width="0.0472%" height="15" fill="rgb(205,98,50)" fg:x="11252" fg:w="10"/><text x="53.3932%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (44 samples, 0.21%)</title><rect x="52.9873%" y="245" width="0.2078%" height="15" fill="rgb(205,185,37)" fg:x="11219" fg:w="44"/><text x="53.2373%" y="255.50"></text></g><g><title>alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_kv_tracking (39 samples, 0.18%)</title><rect x="53.0109%" y="229" width="0.1842%" height="15" fill="rgb(238,207,15)" fg:x="11224" fg:w="39"/><text x="53.2609%" y="239.50"></text></g><g><title>alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (35 samples, 0.17%)</title><rect x="53.0298%" y="213" width="0.1653%" height="15" fill="rgb(213,199,42)" fg:x="11228" fg:w="35"/><text x="53.2798%" y="223.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::do_merge (15 samples, 0.07%)</title><rect x="53.1243%" y="197" width="0.0708%" height="15" fill="rgb(235,201,11)" fg:x="11248" fg:w="15"/><text x="53.3743%" y="207.50"></text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::find_leaf_edges_spanning_range (7 samples, 0.03%)</title><rect x="53.1951%" y="245" width="0.0331%" height="15" fill="rgb(207,46,11)" fg:x="11263" fg:w="7"/><text x="53.4451%" y="255.50"></text></g><g><title>quinn_proto::connection::Connection::detect_lost_packets (8 samples, 0.04%)</title><rect x="53.2329%" y="245" width="0.0378%" height="15" fill="rgb(241,35,35)" fg:x="11271" fg:w="8"/><text x="53.4829%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (7 samples, 0.03%)</title><rect x="53.3793%" y="197" width="0.0331%" height="15" fill="rgb(243,32,47)" fg:x="11302" fg:w="7"/><text x="53.6293%" y="207.50"></text></g><g><title>alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_kv_tracking (3 samples, 0.01%)</title><rect x="53.3982%" y="181" width="0.0142%" height="15" fill="rgb(247,202,23)" fg:x="11306" fg:w="3"/><text x="53.6482%" y="191.50"></text></g><g><title>bytes::bytes::promotable_even_drop (4 samples, 0.02%)</title><rect x="53.4124%" y="197" width="0.0189%" height="15" fill="rgb(219,102,11)" fg:x="11309" fg:w="4"/><text x="53.6624%" y="207.50"></text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::find_leaf_edges_spanning_range (6 samples, 0.03%)</title><rect x="53.4785%" y="181" width="0.0283%" height="15" fill="rgb(243,110,44)" fg:x="11323" fg:w="6"/><text x="53.7285%" y="191.50"></text></g><g><title>quinn_proto::connection::send_buffer::SendBuffer::ack (36 samples, 0.17%)</title><rect x="53.3462%" y="213" width="0.1700%" height="15" fill="rgb(222,74,54)" fg:x="11295" fg:w="36"/><text x="53.5962%" y="223.50"></text></g><g><title>quinn_proto::range_set::btree_range_set::RangeSet::insert (14 samples, 0.07%)</title><rect x="53.4501%" y="197" width="0.0661%" height="15" fill="rgb(216,99,12)" fg:x="11317" fg:w="14"/><text x="53.7001%" y="207.50"></text></g><g><title>quinn_proto::connection::Connection::on_packet_acked (53 samples, 0.25%)</title><rect x="53.2707%" y="245" width="0.2503%" height="15" fill="rgb(226,22,26)" fg:x="11279" fg:w="53"/><text x="53.5207%" y="255.50"></text></g><g><title>quinn_proto::connection::streams::state::StreamsState::received_ack_of (40 samples, 0.19%)</title><rect x="53.3321%" y="229" width="0.1889%" height="15" fill="rgb(217,163,10)" fg:x="11292" fg:w="40"/><text x="53.5821%" y="239.50"></text></g><g><title>quinn_proto::connection::Connection::on_ack_received (139 samples, 0.66%)</title><rect x="52.8834%" y="261" width="0.6565%" height="15" fill="rgb(213,25,53)" fg:x="11197" fg:w="139"/><text x="53.1334%" y="271.50"></text></g><g><title>quinn_proto::connection::spaces::PendingAcks::packet_received (3 samples, 0.01%)</title><rect x="53.5399%" y="261" width="0.0142%" height="15" fill="rgb(252,105,26)" fg:x="11336" fg:w="3"/><text x="53.7899%" y="271.50"></text></g><g><title>quinn_proto::connection::stats::FrameStats::record (7 samples, 0.03%)</title><rect x="53.5541%" y="261" width="0.0331%" height="15" fill="rgb(220,39,43)" fg:x="11339" fg:w="7"/><text x="53.8041%" y="271.50"></text></g><g><title>quinn_proto::connection::assembler::Assembler::insert (14 samples, 0.07%)</title><rect x="53.6816%" y="229" width="0.0661%" height="15" fill="rgb(229,68,48)" fg:x="11366" fg:w="14"/><text x="53.9316%" y="239.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::push (9 samples, 0.04%)</title><rect x="53.7052%" y="213" width="0.0425%" height="15" fill="rgb(252,8,32)" fg:x="11371" fg:w="9"/><text x="53.9552%" y="223.50"></text></g><g><title>quinn_proto::connection::streams::state::StreamsState::received (36 samples, 0.17%)</title><rect x="53.5966%" y="261" width="0.1700%" height="15" fill="rgb(223,20,43)" fg:x="11348" fg:w="36"/><text x="53.8466%" y="271.50"></text></g><g><title>quinn_proto::connection::streams::recv::Recv::ingest (23 samples, 0.11%)</title><rect x="53.6580%" y="245" width="0.1086%" height="15" fill="rgb(229,81,49)" fg:x="11361" fg:w="23"/><text x="53.9080%" y="255.50"></text></g><g><title>quinn_proto::connection::streams::recv::Recv::credit_consumed_by (4 samples, 0.02%)</title><rect x="53.7477%" y="229" width="0.0189%" height="15" fill="rgb(236,28,36)" fg:x="11380" fg:w="4"/><text x="53.9977%" y="239.50"></text></g><g><title>quinn_proto::connection::Connection::process_decrypted_packet (270 samples, 1.28%)</title><rect x="52.5055%" y="293" width="1.2752%" height="15" fill="rgb(249,185,26)" fg:x="11117" fg:w="270"/><text x="52.7555%" y="303.50"></text></g><g><title>quinn_proto::connection::Connection::process_payload (255 samples, 1.20%)</title><rect x="52.5764%" y="277" width="1.2044%" height="15" fill="rgb(249,174,33)" fg:x="11132" fg:w="255"/><text x="52.8264%" y="287.50"></text></g><g><title>_platform_memmove (6 samples, 0.03%)</title><rect x="53.9036%" y="213" width="0.0283%" height="15" fill="rgb(233,201,37)" fg:x="11413" fg:w="6"/><text x="54.1536%" y="223.50"></text></g><g><title>ring_core_0_17_14__aes_gcm_dec_kernel (124 samples, 0.59%)</title><rect x="53.9366%" y="213" width="0.5857%" height="15" fill="rgb(221,78,26)" fg:x="11420" fg:w="124"/><text x="54.1866%" y="223.50"></text></g><g><title>ring::aead::aes_gcm::open (145 samples, 0.68%)</title><rect x="53.8563%" y="229" width="0.6848%" height="15" fill="rgb(250,127,30)" fg:x="11403" fg:w="145"/><text x="54.1063%" y="239.50"></text></g><g><title>ring_core_0_17_14__aes_hw_ctr32_encrypt_blocks (4 samples, 0.02%)</title><rect x="54.5223%" y="213" width="0.0189%" height="15" fill="rgb(230,49,44)" fg:x="11544" fg:w="4"/><text x="54.7723%" y="223.50"></text></g><g><title>ring::aead::algorithm::Algorithm::open_within (157 samples, 0.74%)</title><rect x="53.8280%" y="245" width="0.7415%" height="15" fill="rgb(229,67,23)" fg:x="11397" fg:w="157"/><text x="54.0780%" y="255.50"></text></g><g><title>ring_core_0_17_14__CRYPTO_memcmp (5 samples, 0.02%)</title><rect x="54.5459%" y="229" width="0.0236%" height="15" fill="rgb(249,83,47)" fg:x="11549" fg:w="5"/><text x="54.7959%" y="239.50"></text></g><g><title>quinn_proto::connection::packet_crypto::decrypt_packet_body (167 samples, 0.79%)</title><rect x="53.7902%" y="293" width="0.7887%" height="15" fill="rgb(215,43,3)" fg:x="11389" fg:w="167"/><text x="54.0402%" y="303.50"></text></g><g><title>quinn_proto::crypto::rustls::_&lt;impl quinn_proto::crypto::PacketKey for alloc::boxed::Box&lt;dyn rustls::quic::PacketKey&gt;&gt;::decrypt (162 samples, 0.77%)</title><rect x="53.8138%" y="277" width="0.7651%" height="15" fill="rgb(238,154,13)" fg:x="11394" fg:w="162"/><text x="54.0638%" y="287.50"></text></g><g><title>&lt;rustls::crypto::ring::quic::PacketKey as rustls::quic::PacketKey&gt;::decrypt_in_place (161 samples, 0.76%)</title><rect x="53.8185%" y="261" width="0.7604%" height="15" fill="rgb(219,56,2)" fg:x="11395" fg:w="161"/><text x="54.0685%" y="271.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (3 samples, 0.01%)</title><rect x="54.7584%" y="261" width="0.0142%" height="15" fill="rgb(233,0,4)" fg:x="11594" fg:w="3"/><text x="55.0084%" y="271.50"></text></g><g><title>&lt;rustls::crypto::ring::quic::HeaderProtectionKey as rustls::quic::HeaderProtectionKey&gt;::sample_len (4 samples, 0.02%)</title><rect x="54.7915%" y="245" width="0.0189%" height="15" fill="rgb(235,30,7)" fg:x="11601" fg:w="4"/><text x="55.0415%" y="255.50"></text></g><g><title>quinn_proto::crypto::rustls::_&lt;impl quinn_proto::crypto::HeaderKey for alloc::boxed::Box&lt;dyn rustls::quic::HeaderProtectionKey&gt;&gt;::decrypt (26 samples, 0.12%)</title><rect x="54.8104%" y="245" width="0.1228%" height="15" fill="rgb(250,79,13)" fg:x="11605" fg:w="26"/><text x="55.0604%" y="255.50"></text></g><g><title>rustls::crypto::ring::quic::HeaderProtectionKey::xor_in_place (23 samples, 0.11%)</title><rect x="54.8245%" y="229" width="0.1086%" height="15" fill="rgb(211,146,34)" fg:x="11608" fg:w="23"/><text x="55.0745%" y="239.50"></text></g><g><title>ring::aead::quic::HeaderProtectionKey::new_mask (16 samples, 0.08%)</title><rect x="54.8576%" y="213" width="0.0756%" height="15" fill="rgb(228,22,38)" fg:x="11615" fg:w="16"/><text x="55.1076%" y="223.50"></text></g><g><title>ring::aead::quic::aes_new_mask (14 samples, 0.07%)</title><rect x="54.8670%" y="197" width="0.0661%" height="15" fill="rgb(235,168,5)" fg:x="11617" fg:w="14"/><text x="55.1170%" y="207.50"></text></g><g><title>ring_core_0_17_14__aes_hw_ctr32_encrypt_blocks (7 samples, 0.03%)</title><rect x="54.9001%" y="181" width="0.0331%" height="15" fill="rgb(221,155,16)" fg:x="11624" fg:w="7"/><text x="55.1501%" y="191.50"></text></g><g><title>quinn_proto::connection::packet_crypto::unprotect_header (77 samples, 0.36%)</title><rect x="54.5789%" y="293" width="0.3637%" height="15" fill="rgb(215,215,53)" fg:x="11556" fg:w="77"/><text x="54.8289%" y="303.50"></text></g><g><title>quinn_proto::packet::PartialDecode::finish (56 samples, 0.26%)</title><rect x="54.6781%" y="277" width="0.2645%" height="15" fill="rgb(223,4,10)" fg:x="11577" fg:w="56"/><text x="54.9281%" y="287.50"></text></g><g><title>quinn_proto::packet::PartialDecode::decrypt_header (36 samples, 0.17%)</title><rect x="54.7726%" y="261" width="0.1700%" height="15" fill="rgb(234,103,6)" fg:x="11597" fg:w="36"/><text x="55.0226%" y="271.50"></text></g><g><title>quinn_proto::connection::Connection::handle_decode (589 samples, 2.78%)</title><rect x="52.1797%" y="309" width="2.7818%" height="15" fill="rgb(227,97,0)" fg:x="11048" fg:w="589"/><text x="52.4297%" y="319.50">qu..</text></g><g><title>quinn_proto::connection::Connection::handle_event (610 samples, 2.88%)</title><rect x="52.0899%" y="325" width="2.8810%" height="15" fill="rgb(234,150,53)" fg:x="11029" fg:w="610"/><text x="52.3399%" y="335.50">qu..</text></g><g><title>quinn_proto::connection::Connection::poll (9 samples, 0.04%)</title><rect x="54.9804%" y="325" width="0.0425%" height="15" fill="rgb(228,201,54)" fg:x="11641" fg:w="9"/><text x="55.2304%" y="335.50"></text></g><g><title>quinn_proto::connection::streams::state::StreamsState::poll (7 samples, 0.03%)</title><rect x="54.9898%" y="309" width="0.0331%" height="15" fill="rgb(222,22,37)" fg:x="11643" fg:w="7"/><text x="55.2398%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.02%)</title><rect x="55.3157%" y="309" width="0.0189%" height="15" fill="rgb(237,53,32)" fg:x="11712" fg:w="4"/><text x="55.5657%" y="319.50"></text></g><g><title>quinn_proto::connection::Connection::populate_acks (8 samples, 0.04%)</title><rect x="55.3582%" y="309" width="0.0378%" height="15" fill="rgb(233,25,53)" fg:x="11721" fg:w="8"/><text x="55.6082%" y="319.50"></text></g><g><title>quinn_proto::connection::Connection::predict_1rtt_overhead (12 samples, 0.06%)</title><rect x="55.3960%" y="309" width="0.0567%" height="15" fill="rgb(210,40,34)" fg:x="11729" fg:w="12"/><text x="55.6460%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7 samples, 0.03%)</title><rect x="55.4810%" y="293" width="0.0331%" height="15" fill="rgb(241,220,44)" fg:x="11747" fg:w="7"/><text x="55.7310%" y="303.50"></text></g><g><title>quinn_proto::connection::Connection::space_can_send (19 samples, 0.09%)</title><rect x="55.4527%" y="309" width="0.0897%" height="15" fill="rgb(235,28,35)" fg:x="11741" fg:w="19"/><text x="55.7027%" y="319.50"></text></g><g><title>quinn_proto::connection::spaces::Retransmits::is_empty (6 samples, 0.03%)</title><rect x="55.5141%" y="293" width="0.0283%" height="15" fill="rgb(210,56,17)" fg:x="11754" fg:w="6"/><text x="55.7641%" y="303.50"></text></g><g><title>quinn_proto::connection::datagrams::DatagramState::write (4 samples, 0.02%)</title><rect x="55.5424%" y="309" width="0.0189%" height="15" fill="rgb(224,130,29)" fg:x="11760" fg:w="4"/><text x="55.7924%" y="319.50"></text></g><g><title>quinn_proto::connection::pacing::Pacer::delay (4 samples, 0.02%)</title><rect x="55.5613%" y="309" width="0.0189%" height="15" fill="rgb(235,212,8)" fg:x="11764" fg:w="4"/><text x="55.8113%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (4 samples, 0.02%)</title><rect x="55.6086%" y="293" width="0.0189%" height="15" fill="rgb(223,33,50)" fg:x="11774" fg:w="4"/><text x="55.8586%" y="303.50"></text></g><g><title>quinn_proto::connection::Connection::set_loss_detection_timer (7 samples, 0.03%)</title><rect x="55.6275%" y="293" width="0.0331%" height="15" fill="rgb(219,149,13)" fg:x="11778" fg:w="7"/><text x="55.8775%" y="303.50"></text></g><g><title>quinn_proto::connection::Connection::pto_time_and_space (6 samples, 0.03%)</title><rect x="55.6322%" y="277" width="0.0283%" height="15" fill="rgb(250,156,29)" fg:x="11779" fg:w="6"/><text x="55.8822%" y="287.50"></text></g><g><title>quinn_proto::crypto::rustls::_&lt;impl quinn_proto::crypto::HeaderKey for alloc::boxed::Box&lt;dyn rustls::quic::HeaderProtectionKey&gt;&gt;::encrypt (10 samples, 0.05%)</title><rect x="55.6888%" y="277" width="0.0472%" height="15" fill="rgb(216,193,19)" fg:x="11791" fg:w="10"/><text x="55.9388%" y="287.50"></text></g><g><title>rustls::crypto::ring::quic::HeaderProtectionKey::xor_in_place (8 samples, 0.04%)</title><rect x="55.6983%" y="261" width="0.0378%" height="15" fill="rgb(216,135,14)" fg:x="11793" fg:w="8"/><text x="55.9483%" y="271.50"></text></g><g><title>ring::aead::quic::HeaderProtectionKey::new_mask (5 samples, 0.02%)</title><rect x="55.7125%" y="245" width="0.0236%" height="15" fill="rgb(241,47,5)" fg:x="11796" fg:w="5"/><text x="55.9625%" y="255.50"></text></g><g><title>ring::aead::quic::aes_new_mask (5 samples, 0.02%)</title><rect x="55.7125%" y="229" width="0.0236%" height="15" fill="rgb(233,42,35)" fg:x="11796" fg:w="5"/><text x="55.9625%" y="239.50"></text></g><g><title>_platform_memmove (6 samples, 0.03%)</title><rect x="55.8211%" y="229" width="0.0283%" height="15" fill="rgb(231,13,6)" fg:x="11819" fg:w="6"/><text x="56.0711%" y="239.50"></text></g><g><title>_platform_memset (4 samples, 0.02%)</title><rect x="55.8494%" y="229" width="0.0189%" height="15" fill="rgb(207,181,40)" fg:x="11825" fg:w="4"/><text x="56.0994%" y="239.50"></text></g><g><title>ring_core_0_17_14__aes_gcm_enc_kernel (113 samples, 0.53%)</title><rect x="55.8683%" y="229" width="0.5337%" height="15" fill="rgb(254,173,49)" fg:x="11829" fg:w="113"/><text x="56.1183%" y="239.50"></text></g><g><title>ring_core_0_17_14__aes_hw_ctr32_encrypt_blocks (3 samples, 0.01%)</title><rect x="56.4020%" y="229" width="0.0142%" height="15" fill="rgb(221,1,38)" fg:x="11942" fg:w="3"/><text x="56.6520%" y="239.50"></text></g><g><title>ring::aead::aes_gcm::seal (145 samples, 0.68%)</title><rect x="55.7408%" y="245" width="0.6848%" height="15" fill="rgb(206,124,46)" fg:x="11802" fg:w="145"/><text x="55.9908%" y="255.50"></text></g><g><title>ring::aead::algorithm::aes_gcm_seal (3 samples, 0.01%)</title><rect x="56.4256%" y="245" width="0.0142%" height="15" fill="rgb(249,21,11)" fg:x="11947" fg:w="3"/><text x="56.6756%" y="255.50"></text></g><g><title>&lt;rustls::crypto::ring::quic::PacketKey as rustls::quic::PacketKey&gt;::encrypt_in_place (149 samples, 0.70%)</title><rect x="55.7408%" y="261" width="0.7037%" height="15" fill="rgb(222,201,40)" fg:x="11802" fg:w="149"/><text x="55.9908%" y="271.50"></text></g><g><title>quinn_proto::connection::packet_builder::PacketBuilder::finish (167 samples, 0.79%)</title><rect x="55.6605%" y="293" width="0.7887%" height="15" fill="rgb(235,61,29)" fg:x="11785" fg:w="167"/><text x="55.9105%" y="303.50"></text></g><g><title>quinn_proto::crypto::rustls::_&lt;impl quinn_proto::crypto::PacketKey for alloc::boxed::Box&lt;dyn rustls::quic::PacketKey&gt;&gt;::encrypt (151 samples, 0.71%)</title><rect x="55.7361%" y="277" width="0.7132%" height="15" fill="rgb(219,207,3)" fg:x="11801" fg:w="151"/><text x="55.9861%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::split (5 samples, 0.02%)</title><rect x="56.6429%" y="261" width="0.0236%" height="15" fill="rgb(222,56,46)" fg:x="11993" fg:w="5"/><text x="56.8929%" y="271.50"></text></g><g><title>szone_malloc_should_clear (4 samples, 0.02%)</title><rect x="56.6476%" y="245" width="0.0189%" height="15" fill="rgb(239,76,54)" fg:x="11994" fg:w="4"/><text x="56.8976%" y="255.50"></text></g><g><title>small_malloc_should_clear (4 samples, 0.02%)</title><rect x="56.6476%" y="229" width="0.0189%" height="15" fill="rgb(231,124,27)" fg:x="11994" fg:w="4"/><text x="56.8976%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (19 samples, 0.09%)</title><rect x="56.5815%" y="277" width="0.0897%" height="15" fill="rgb(249,195,6)" fg:x="11980" fg:w="19"/><text x="56.8315%" y="287.50"></text></g><g><title>quinn_proto::connection::spaces::PacketSpace::sent (48 samples, 0.23%)</title><rect x="56.4493%" y="293" width="0.2267%" height="15" fill="rgb(237,174,47)" fg:x="11952" fg:w="48"/><text x="56.6993%" y="303.50"></text></g><g><title>quinn_proto::connection::packet_builder::PacketBuilder::finish_and_track (233 samples, 1.10%)</title><rect x="55.5802%" y="309" width="1.1005%" height="15" fill="rgb(206,201,31)" fg:x="11768" fg:w="233"/><text x="55.8302%" y="319.50"></text></g><g><title>quinn_proto::connection::packet_builder::PacketBuilder::new (23 samples, 0.11%)</title><rect x="56.6807%" y="309" width="0.1086%" height="15" fill="rgb(231,57,52)" fg:x="12001" fg:w="23"/><text x="56.9307%" y="319.50"></text></g><g><title>quinn_proto::packet::Header::encode (5 samples, 0.02%)</title><rect x="56.7657%" y="293" width="0.0236%" height="15" fill="rgb(248,177,22)" fg:x="12019" fg:w="5"/><text x="57.0157%" y="303.50"></text></g><g><title>quinn_proto::connection::spaces::PacketSpace::maybe_queue_probe (8 samples, 0.04%)</title><rect x="56.7893%" y="309" width="0.0378%" height="15" fill="rgb(215,211,37)" fg:x="12024" fg:w="8"/><text x="57.0393%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.01%)</title><rect x="56.8790%" y="293" width="0.0142%" height="15" fill="rgb(241,128,51)" fg:x="12043" fg:w="3"/><text x="57.1290%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.01%)</title><rect x="56.8790%" y="277" width="0.0142%" height="15" fill="rgb(227,165,31)" fg:x="12043" fg:w="3"/><text x="57.1290%" y="287.50"></text></g><g><title>quinn_proto::connection::streams::state::StreamsState::write_control_frames (14 samples, 0.07%)</title><rect x="56.8318%" y="309" width="0.0661%" height="15" fill="rgb(228,167,24)" fg:x="12033" fg:w="14"/><text x="57.0818%" y="319.50"></text></g><g><title>_platform_memmove (16 samples, 0.08%)</title><rect x="57.0160%" y="293" width="0.0756%" height="15" fill="rgb(228,143,12)" fg:x="12072" fg:w="16"/><text x="57.2660%" y="303.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (4 samples, 0.02%)</title><rect x="57.0916%" y="293" width="0.0189%" height="15" fill="rgb(249,149,8)" fg:x="12088" fg:w="4"/><text x="57.3416%" y="303.50"></text></g><g><title>quinn_proto::connection::send_buffer::SendBuffer::poll_transmit (3 samples, 0.01%)</title><rect x="57.1105%" y="293" width="0.0142%" height="15" fill="rgb(243,35,44)" fg:x="12092" fg:w="3"/><text x="57.3605%" y="303.50"></text></g><g><title>quinn_proto::connection::streams::state::StreamsState::write_stream_frames (53 samples, 0.25%)</title><rect x="56.8979%" y="309" width="0.2503%" height="15" fill="rgb(246,89,9)" fg:x="12047" fg:w="53"/><text x="57.1479%" y="319.50"></text></g><g><title>quinn_proto::frame::StreamMeta::encode (5 samples, 0.02%)</title><rect x="57.1246%" y="293" width="0.0236%" height="15" fill="rgb(233,213,13)" fg:x="12095" fg:w="5"/><text x="57.3746%" y="303.50"></text></g><g><title>&lt;quinn_proto::varint::VarInt as quinn_proto::coding::Codec&gt;::encode (3 samples, 0.01%)</title><rect x="57.1341%" y="277" width="0.0142%" height="15" fill="rgb(233,141,41)" fg:x="12097" fg:w="3"/><text x="57.3841%" y="287.50"></text></g><g><title>quinn_proto::connection::Connection::poll_transmit (450 samples, 2.13%)</title><rect x="55.0276%" y="325" width="2.1253%" height="15" fill="rgb(239,167,4)" fg:x="11651" fg:w="450"/><text x="55.2776%" y="335.50">q..</text></g><g><title>quinn_proto::connection::Connection::space_can_send (3 samples, 0.01%)</title><rect x="57.1530%" y="325" width="0.0142%" height="15" fill="rgb(209,217,16)" fg:x="12101" fg:w="3"/><text x="57.4030%" y="335.50"></text></g><g><title>quinn_proto::connection::timer::TimerTable::next_timeout (6 samples, 0.03%)</title><rect x="57.1908%" y="325" width="0.0283%" height="15" fill="rgb(219,88,35)" fg:x="12109" fg:w="6"/><text x="57.4408%" y="335.50"></text></g><g><title>_pthread_mutex_firstfit_lock_slow (16 samples, 0.08%)</title><rect x="57.2285%" y="309" width="0.0756%" height="15" fill="rgb(220,193,23)" fg:x="12117" fg:w="16"/><text x="57.4785%" y="319.50"></text></g><g><title>_pthread_mutex_firstfit_lock_wait (14 samples, 0.07%)</title><rect x="57.2380%" y="293" width="0.0661%" height="15" fill="rgb(230,90,52)" fg:x="12119" fg:w="14"/><text x="57.4880%" y="303.50"></text></g><g><title>__psynch_mutexwait (14 samples, 0.07%)</title><rect x="57.2380%" y="277" width="0.0661%" height="15" fill="rgb(252,106,19)" fg:x="12119" fg:w="14"/><text x="57.4880%" y="287.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (21 samples, 0.10%)</title><rect x="57.2191%" y="325" width="0.0992%" height="15" fill="rgb(206,74,20)" fg:x="12115" fg:w="21"/><text x="57.4691%" y="335.50"></text></g><g><title>pthread_mutex_lock (3 samples, 0.01%)</title><rect x="57.3041%" y="309" width="0.0142%" height="15" fill="rgb(230,138,44)" fg:x="12133" fg:w="3"/><text x="57.5541%" y="319.50"></text></g><g><title>clock_gettime_nsec_np (3 samples, 0.01%)</title><rect x="57.3183%" y="293" width="0.0142%" height="15" fill="rgb(235,182,43)" fg:x="12136" fg:w="3"/><text x="57.5683%" y="303.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (4 samples, 0.02%)</title><rect x="57.3183%" y="325" width="0.0189%" height="15" fill="rgb(242,16,51)" fg:x="12136" fg:w="4"/><text x="57.5683%" y="335.50"></text></g><g><title>clock_gettime (4 samples, 0.02%)</title><rect x="57.3183%" y="309" width="0.0189%" height="15" fill="rgb(248,9,4)" fg:x="12136" fg:w="4"/><text x="57.5683%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (4 samples, 0.02%)</title><rect x="57.3513%" y="309" width="0.0189%" height="15" fill="rgb(210,31,22)" fg:x="12143" fg:w="4"/><text x="57.6013%" y="319.50"></text></g><g><title>tokio::runtime::context::with_scheduler (3 samples, 0.01%)</title><rect x="57.3561%" y="293" width="0.0142%" height="15" fill="rgb(239,54,39)" fg:x="12144" fg:w="3"/><text x="57.6061%" y="303.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (3 samples, 0.01%)</title><rect x="57.3561%" y="277" width="0.0142%" height="15" fill="rgb(230,99,41)" fg:x="12144" fg:w="3"/><text x="57.6061%" y="287.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (9 samples, 0.04%)</title><rect x="57.3466%" y="325" width="0.0425%" height="15" fill="rgb(253,106,12)" fg:x="12142" fg:w="9"/><text x="57.5966%" y="335.50"></text></g><g><title>&lt;tokio::task::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="57.4411%" y="309" width="0.0189%" height="15" fill="rgb(213,46,41)" fg:x="12162" fg:w="4"/><text x="57.6911%" y="319.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (7 samples, 0.03%)</title><rect x="57.4600%" y="309" width="0.0331%" height="15" fill="rgb(215,133,35)" fg:x="12166" fg:w="7"/><text x="57.7100%" y="319.50"></text></g><g><title>_tlv_get_addr (6 samples, 0.03%)</title><rect x="57.4647%" y="293" width="0.0283%" height="15" fill="rgb(213,28,5)" fg:x="12167" fg:w="6"/><text x="57.7147%" y="303.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (39 samples, 0.18%)</title><rect x="57.3939%" y="325" width="0.1842%" height="15" fill="rgb(215,77,49)" fg:x="12152" fg:w="39"/><text x="57.6439%" y="335.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (18 samples, 0.09%)</title><rect x="57.4930%" y="309" width="0.0850%" height="15" fill="rgb(248,100,22)" fg:x="12173" fg:w="18"/><text x="57.7430%" y="319.50"></text></g><g><title>mach_absolute_time (8 samples, 0.04%)</title><rect x="57.6064%" y="261" width="0.0378%" height="15" fill="rgb(208,67,9)" fg:x="12197" fg:w="8"/><text x="57.8564%" y="271.50"></text></g><g><title>clock_gettime_nsec_np (11 samples, 0.05%)</title><rect x="57.5969%" y="277" width="0.0520%" height="15" fill="rgb(219,133,21)" fg:x="12195" fg:w="11"/><text x="57.8469%" y="287.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (12 samples, 0.06%)</title><rect x="57.5969%" y="309" width="0.0567%" height="15" fill="rgb(246,46,29)" fg:x="12195" fg:w="12"/><text x="57.8469%" y="319.50"></text></g><g><title>clock_gettime (12 samples, 0.06%)</title><rect x="57.5969%" y="293" width="0.0567%" height="15" fill="rgb(246,185,52)" fg:x="12195" fg:w="12"/><text x="57.8469%" y="303.50"></text></g><g><title>tokio::time::sleep::Sleep::reset (24 samples, 0.11%)</title><rect x="57.5828%" y="325" width="0.1134%" height="15" fill="rgb(252,136,11)" fg:x="12192" fg:w="24"/><text x="57.8328%" y="335.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::reset (6 samples, 0.03%)</title><rect x="57.6678%" y="309" width="0.0283%" height="15" fill="rgb(219,138,53)" fg:x="12210" fg:w="6"/><text x="57.9178%" y="319.50"></text></g><g><title>std::time::Instant::duration_since (3 samples, 0.01%)</title><rect x="57.6820%" y="293" width="0.0142%" height="15" fill="rgb(211,51,23)" fg:x="12213" fg:w="3"/><text x="57.9320%" y="303.50"></text></g><g><title>&lt;u64 as tracing_core::field::Value&gt;::record (4 samples, 0.02%)</title><rect x="57.8520%" y="261" width="0.0189%" height="15" fill="rgb(247,221,28)" fg:x="12249" fg:w="4"/><text x="58.1020%" y="271.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.01%)</title><rect x="57.9228%" y="229" width="0.0142%" height="15" fill="rgb(251,222,45)" fg:x="12264" fg:w="3"/><text x="58.1728%" y="239.50"></text></g><g><title>&lt;nu_ansi_term::ansi::Prefix as core::fmt::Display&gt;::fmt (4 samples, 0.02%)</title><rect x="58.0362%" y="181" width="0.0189%" height="15" fill="rgb(217,162,53)" fg:x="12288" fg:w="4"/><text x="58.2862%" y="191.50"></text></g><g><title>_platform_memmove (3 samples, 0.01%)</title><rect x="58.0740%" y="133" width="0.0142%" height="15" fill="rgb(229,93,14)" fg:x="12296" fg:w="3"/><text x="58.3240%" y="143.50"></text></g><g><title>default_zone_realloc (3 samples, 0.01%)</title><rect x="58.1306%" y="69" width="0.0142%" height="15" fill="rgb(209,67,49)" fg:x="12308" fg:w="3"/><text x="58.3806%" y="79.50"></text></g><g><title>_szone_free (5 samples, 0.02%)</title><rect x="58.1826%" y="53" width="0.0236%" height="15" fill="rgb(213,87,29)" fg:x="12319" fg:w="5"/><text x="58.4326%" y="63.50"></text></g><g><title>_platform_memset (3 samples, 0.01%)</title><rect x="58.2393%" y="37" width="0.0142%" height="15" fill="rgb(205,151,52)" fg:x="12331" fg:w="3"/><text x="58.4893%" y="47.50"></text></g><g><title>free_tiny (19 samples, 0.09%)</title><rect x="58.2062%" y="53" width="0.0897%" height="15" fill="rgb(253,215,39)" fg:x="12324" fg:w="19"/><text x="58.4562%" y="63.50"></text></g><g><title>tiny_free_no_lock (9 samples, 0.04%)</title><rect x="58.2534%" y="37" width="0.0425%" height="15" fill="rgb(221,220,41)" fg:x="12334" fg:w="9"/><text x="58.5034%" y="47.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.01%)</title><rect x="58.2959%" y="53" width="0.0142%" height="15" fill="rgb(218,133,21)" fg:x="12343" fg:w="3"/><text x="58.5459%" y="63.50"></text></g><g><title>_malloc_zone_realloc (43 samples, 0.20%)</title><rect x="58.1165%" y="85" width="0.2031%" height="15" fill="rgb(221,193,43)" fg:x="12305" fg:w="43"/><text x="58.3665%" y="95.50"></text></g><g><title>szone_realloc (37 samples, 0.17%)</title><rect x="58.1448%" y="69" width="0.1748%" height="15" fill="rgb(240,128,52)" fg:x="12311" fg:w="37"/><text x="58.3948%" y="79.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (63 samples, 0.30%)</title><rect x="58.0645%" y="149" width="0.2975%" height="15" fill="rgb(253,114,12)" fg:x="12294" fg:w="63"/><text x="58.3145%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (58 samples, 0.27%)</title><rect x="58.0881%" y="133" width="0.2739%" height="15" fill="rgb(215,223,47)" fg:x="12299" fg:w="58"/><text x="58.3381%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (58 samples, 0.27%)</title><rect x="58.0881%" y="117" width="0.2739%" height="15" fill="rgb(248,225,23)" fg:x="12299" fg:w="58"/><text x="58.3381%" y="127.50"></text></g><g><title>_realloc (57 samples, 0.27%)</title><rect x="58.0929%" y="101" width="0.2692%" height="15" fill="rgb(250,108,0)" fg:x="12300" fg:w="57"/><text x="58.3429%" y="111.50"></text></g><g><title>szone_size (7 samples, 0.03%)</title><rect x="58.3290%" y="85" width="0.0331%" height="15" fill="rgb(228,208,7)" fg:x="12350" fg:w="7"/><text x="58.5790%" y="95.50"></text></g><g><title>tiny_size (5 samples, 0.02%)</title><rect x="58.3384%" y="69" width="0.0236%" height="15" fill="rgb(244,45,10)" fg:x="12352" fg:w="5"/><text x="58.5884%" y="79.50"></text></g><g><title>&lt;nu_ansi_term::ansi::Suffix as core::fmt::Display&gt;::fmt (73 samples, 0.34%)</title><rect x="58.0551%" y="181" width="0.3448%" height="15" fill="rgb(207,125,25)" fg:x="12292" fg:w="73"/><text x="58.3051%" y="191.50"></text></g><g><title>core::fmt::write (71 samples, 0.34%)</title><rect x="58.0645%" y="165" width="0.3353%" height="15" fill="rgb(210,195,18)" fg:x="12294" fg:w="71"/><text x="58.3145%" y="175.50"></text></g><g><title>core::fmt::Formatter::pad (4 samples, 0.02%)</title><rect x="58.3810%" y="149" width="0.0189%" height="15" fill="rgb(249,80,12)" fg:x="12361" fg:w="4"/><text x="58.6310%" y="159.50"></text></g><g><title>core::fmt::write (7 samples, 0.03%)</title><rect x="58.3998%" y="181" width="0.0331%" height="15" fill="rgb(221,65,9)" fg:x="12365" fg:w="7"/><text x="58.6498%" y="191.50"></text></g><g><title>&lt;nu_ansi_term::ansi::Suffix as core::fmt::Display&gt;::fmt (5 samples, 0.02%)</title><rect x="58.4093%" y="165" width="0.0236%" height="15" fill="rgb(235,49,36)" fg:x="12367" fg:w="5"/><text x="58.6593%" y="175.50"></text></g><g><title>_malloc_zone_malloc (4 samples, 0.02%)</title><rect x="58.5840%" y="101" width="0.0189%" height="15" fill="rgb(225,32,20)" fg:x="12404" fg:w="4"/><text x="58.8340%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (28 samples, 0.13%)</title><rect x="58.5038%" y="149" width="0.1322%" height="15" fill="rgb(215,141,46)" fg:x="12387" fg:w="28"/><text x="58.7538%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (21 samples, 0.10%)</title><rect x="58.5368%" y="133" width="0.0992%" height="15" fill="rgb(250,160,47)" fg:x="12394" fg:w="21"/><text x="58.7868%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (14 samples, 0.07%)</title><rect x="58.5699%" y="117" width="0.0661%" height="15" fill="rgb(216,222,40)" fg:x="12401" fg:w="14"/><text x="58.8199%" y="127.50"></text></g><g><title>szone_malloc_should_clear (6 samples, 0.03%)</title><rect x="58.6077%" y="101" width="0.0283%" height="15" fill="rgb(234,217,39)" fg:x="12409" fg:w="6"/><text x="58.8577%" y="111.50"></text></g><g><title>tiny_malloc_should_clear (6 samples, 0.03%)</title><rect x="58.6077%" y="85" width="0.0283%" height="15" fill="rgb(207,178,40)" fg:x="12409" fg:w="6"/><text x="58.8577%" y="95.50"></text></g><g><title>tiny_malloc_from_free_list (3 samples, 0.01%)</title><rect x="58.6218%" y="69" width="0.0142%" height="15" fill="rgb(221,136,13)" fg:x="12412" fg:w="3"/><text x="58.8718%" y="79.50"></text></g><g><title>&lt;nu_ansi_term::display::AnsiGenericString&lt;str&gt; as core::fmt::Display&gt;::fmt (138 samples, 0.65%)</title><rect x="57.9984%" y="213" width="0.6518%" height="15" fill="rgb(249,199,10)" fg:x="12280" fg:w="138"/><text x="58.2484%" y="223.50"></text></g><g><title>core::fmt::write (132 samples, 0.62%)</title><rect x="58.0267%" y="197" width="0.6234%" height="15" fill="rgb(249,222,13)" fg:x="12286" fg:w="132"/><text x="58.2767%" y="207.50"></text></g><g><title>nu_ansi_term::ansi::_&lt;impl nu_ansi_term::style::Style&gt;::write_prefix (46 samples, 0.22%)</title><rect x="58.4329%" y="181" width="0.2173%" height="15" fill="rgb(244,185,38)" fg:x="12372" fg:w="46"/><text x="58.6829%" y="191.50"></text></g><g><title>core::fmt::write (37 samples, 0.17%)</title><rect x="58.4754%" y="165" width="0.1748%" height="15" fill="rgb(236,202,9)" fg:x="12381" fg:w="37"/><text x="58.7254%" y="175.50"></text></g><g><title>&lt;char as core::fmt::Display&gt;::fmt (3 samples, 0.01%)</title><rect x="58.6360%" y="149" width="0.0142%" height="15" fill="rgb(250,229,37)" fg:x="12415" fg:w="3"/><text x="58.8860%" y="159.50"></text></g><g><title>core::fmt::num::imp::_&lt;impl core::fmt::Display for u64&gt;::fmt (3 samples, 0.01%)</title><rect x="58.6596%" y="213" width="0.0142%" height="15" fill="rgb(206,174,23)" fg:x="12420" fg:w="3"/><text x="58.9096%" y="223.50"></text></g><g><title>core::fmt::num::imp::_&lt;impl u64&gt;::_fmt (6 samples, 0.03%)</title><rect x="58.6738%" y="213" width="0.0283%" height="15" fill="rgb(211,33,43)" fg:x="12423" fg:w="6"/><text x="58.9238%" y="223.50"></text></g><g><title>tracing_core::span::Attributes::record (183 samples, 0.86%)</title><rect x="57.8425%" y="277" width="0.8643%" height="15" fill="rgb(245,58,50)" fg:x="12247" fg:w="183"/><text x="58.0925%" y="287.50"></text></g><g><title>tracing_core::field::Visit::record_u64 (177 samples, 0.84%)</title><rect x="57.8709%" y="261" width="0.8360%" height="15" fill="rgb(244,68,36)" fg:x="12253" fg:w="177"/><text x="58.1209%" y="271.50"></text></g><g><title>&lt;tracing_subscriber::fmt::format::DefaultVisitor as tracing_core::field::Visit&gt;::record_debug (174 samples, 0.82%)</title><rect x="57.8850%" y="245" width="0.8218%" height="15" fill="rgb(232,229,15)" fg:x="12256" fg:w="174"/><text x="58.1350%" y="255.50"></text></g><g><title>core::fmt::write (163 samples, 0.77%)</title><rect x="57.9370%" y="229" width="0.7698%" height="15" fill="rgb(254,30,23)" fg:x="12267" fg:w="163"/><text x="58.1870%" y="239.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_new_span (209 samples, 0.99%)</title><rect x="57.7859%" y="293" width="0.9871%" height="15" fill="rgb(235,160,14)" fg:x="12235" fg:w="209"/><text x="58.0359%" y="303.50"></text></g><g><title>tracing_subscriber::registry::extensions::ExtensionsMut::insert (14 samples, 0.07%)</title><rect x="58.7068%" y="277" width="0.0661%" height="15" fill="rgb(212,155,44)" fg:x="12430" fg:w="14"/><text x="58.9568%" y="287.50"></text></g><g><title>szone_malloc_should_clear (5 samples, 0.02%)</title><rect x="58.7494%" y="261" width="0.0236%" height="15" fill="rgb(226,2,50)" fg:x="12439" fg:w="5"/><text x="58.9994%" y="271.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.01%)</title><rect x="58.7588%" y="245" width="0.0142%" height="15" fill="rgb(234,177,6)" fg:x="12441" fg:w="3"/><text x="59.0088%" y="255.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.01%)</title><rect x="58.7871%" y="293" width="0.0142%" height="15" fill="rgb(217,24,9)" fg:x="12447" fg:w="3"/><text x="59.0371%" y="303.50"></text></g><g><title>sharded_slab::pool::Pool&lt;T,C&gt;::create_with (14 samples, 0.07%)</title><rect x="58.8013%" y="293" width="0.0661%" height="15" fill="rgb(220,13,46)" fg:x="12450" fg:w="14"/><text x="59.0513%" y="303.50"></text></g><g><title>sharded_slab::shard::Shard&lt;T,C&gt;::init_with (3 samples, 0.01%)</title><rect x="58.8533%" y="277" width="0.0142%" height="15" fill="rgb(239,221,27)" fg:x="12461" fg:w="3"/><text x="59.1033%" y="287.50"></text></g><g><title>tracing::span::Span::new (253 samples, 1.19%)</title><rect x="57.6961%" y="325" width="1.1949%" height="15" fill="rgb(222,198,25)" fg:x="12216" fg:w="253"/><text x="57.9461%" y="335.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (238 samples, 1.12%)</title><rect x="57.7670%" y="309" width="1.1241%" height="15" fill="rgb(211,99,13)" fg:x="12231" fg:w="238"/><text x="58.0170%" y="319.50"></text></g><g><title>tracing_subscriber::filter::env::EnvFilter::on_new_span (5 samples, 0.02%)</title><rect x="58.8674%" y="293" width="0.0236%" height="15" fill="rgb(232,111,31)" fg:x="12464" fg:w="5"/><text x="59.1174%" y="303.50"></text></g><g><title>&lt;quinn::connection::ConnectionDriver as core::future::future::Future&gt;::poll (8,415 samples, 39.74%)</title><rect x="19.1565%" y="341" width="39.7440%" height="15" fill="rgb(245,82,37)" fg:x="4056" fg:w="8415"/><text x="19.4065%" y="351.50">&lt;quinn::connection::ConnectionDriver as core::future::future::Fut..</text></g><g><title>&lt;quinn::runtime::tokio::TokioRuntime as quinn::runtime::Runtime&gt;::now (5 samples, 0.02%)</title><rect x="58.9383%" y="325" width="0.0236%" height="15" fill="rgb(227,149,46)" fg:x="12479" fg:w="5"/><text x="59.1883%" y="335.50"></text></g><g><title>pthread_mutex_unlock (3 samples, 0.01%)</title><rect x="58.9666%" y="325" width="0.0142%" height="15" fill="rgb(218,36,50)" fg:x="12485" fg:w="3"/><text x="59.2166%" y="335.50"></text></g><g><title>__rustc::__rdl_alloc (4 samples, 0.02%)</title><rect x="59.1555%" y="293" width="0.0189%" height="15" fill="rgb(226,80,48)" fg:x="12525" fg:w="4"/><text x="59.4055%" y="303.50"></text></g><g><title>__rustc::__rust_alloc (4 samples, 0.02%)</title><rect x="59.1744%" y="293" width="0.0189%" height="15" fill="rgb(238,224,15)" fg:x="12529" fg:w="4"/><text x="59.4244%" y="303.50"></text></g><g><title>_platform_memmove (10 samples, 0.05%)</title><rect x="59.2028%" y="293" width="0.0472%" height="15" fill="rgb(241,136,10)" fg:x="12535" fg:w="10"/><text x="59.4528%" y="303.50"></text></g><g><title>malloc (3 samples, 0.01%)</title><rect x="59.2500%" y="293" width="0.0142%" height="15" fill="rgb(208,32,45)" fg:x="12545" fg:w="3"/><text x="59.5000%" y="303.50"></text></g><g><title>rack_get_thread_index (4 samples, 0.02%)</title><rect x="59.3114%" y="261" width="0.0189%" height="15" fill="rgb(207,135,9)" fg:x="12558" fg:w="4"/><text x="59.5614%" y="271.50"></text></g><g><title>small_free_list_add_ptr (4 samples, 0.02%)</title><rect x="59.3775%" y="245" width="0.0189%" height="15" fill="rgb(206,86,44)" fg:x="12572" fg:w="4"/><text x="59.6275%" y="255.50"></text></g><g><title>small_malloc_should_clear (39 samples, 0.18%)</title><rect x="59.2736%" y="277" width="0.1842%" height="15" fill="rgb(245,177,15)" fg:x="12550" fg:w="39"/><text x="59.5236%" y="287.50"></text></g><g><title>small_malloc_from_free_list (27 samples, 0.13%)</title><rect x="59.3303%" y="261" width="0.1275%" height="15" fill="rgb(206,64,50)" fg:x="12562" fg:w="27"/><text x="59.5803%" y="271.50"></text></g><g><title>small_free_list_remove_ptr_no_clear (11 samples, 0.05%)</title><rect x="59.4058%" y="245" width="0.0520%" height="15" fill="rgb(234,36,40)" fg:x="12578" fg:w="11"/><text x="59.6558%" y="255.50"></text></g><g><title>szone_malloc_should_clear (47 samples, 0.22%)</title><rect x="59.2642%" y="293" width="0.2220%" height="15" fill="rgb(213,64,8)" fg:x="12548" fg:w="47"/><text x="59.5142%" y="303.50"></text></g><g><title>tiny_malloc_should_clear (6 samples, 0.03%)</title><rect x="59.4578%" y="277" width="0.0283%" height="15" fill="rgb(210,75,36)" fg:x="12589" fg:w="6"/><text x="59.7078%" y="287.50"></text></g><g><title>tiny_malloc_from_free_list (4 samples, 0.02%)</title><rect x="59.4672%" y="261" width="0.0189%" height="15" fill="rgb(229,88,21)" fg:x="12591" fg:w="4"/><text x="59.7172%" y="271.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::convert::From&lt;&amp;[u8]&gt;&gt;::from (74 samples, 0.35%)</title><rect x="59.1508%" y="309" width="0.3495%" height="15" fill="rgb(252,204,47)" fg:x="12524" fg:w="74"/><text x="59.4008%" y="319.50"></text></g><g><title>szone_malloc_type_malloc (3 samples, 0.01%)</title><rect x="59.4861%" y="293" width="0.0142%" height="15" fill="rgb(208,77,27)" fg:x="12595" fg:w="3"/><text x="59.7361%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,std::io::error::Error&gt;&gt; (3 samples, 0.01%)</title><rect x="59.5381%" y="293" width="0.0142%" height="15" fill="rgb(221,76,26)" fg:x="12606" fg:w="3"/><text x="59.7881%" y="303.50"></text></g><g><title>_tlv_get_addr (8 samples, 0.04%)</title><rect x="59.6703%" y="261" width="0.0378%" height="15" fill="rgb(225,139,18)" fg:x="12634" fg:w="8"/><text x="59.9203%" y="271.50"></text></g><g><title>tokio::net::udp::UdpSocket::poll_recv_ready (42 samples, 0.20%)</title><rect x="59.5570%" y="293" width="0.1984%" height="15" fill="rgb(230,137,11)" fg:x="12610" fg:w="42"/><text x="59.8070%" y="303.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (36 samples, 0.17%)</title><rect x="59.5853%" y="277" width="0.1700%" height="15" fill="rgb(212,28,1)" fg:x="12616" fg:w="36"/><text x="59.8353%" y="287.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (10 samples, 0.05%)</title><rect x="59.7081%" y="261" width="0.0472%" height="15" fill="rgb(248,164,17)" fg:x="12642" fg:w="10"/><text x="59.9581%" y="271.50"></text></g><g><title>__recvmsg (421 samples, 1.99%)</title><rect x="59.8215%" y="277" width="1.9884%" height="15" fill="rgb(222,171,42)" fg:x="12666" fg:w="421"/><text x="60.0715%" y="287.50">_..</text></g><g><title>quinn_udp::imp::UdpSocketState::recv (4,555 samples, 21.51%)</title><rect x="61.8099%" y="277" width="21.5132%" height="15" fill="rgb(243,84,45)" fg:x="13087" fg:w="4555"/><text x="62.0599%" y="287.50">quinn_udp::imp::UdpSocketState::re..</text></g><g><title>__recvmsg (4,546 samples, 21.47%)</title><rect x="61.8524%" y="261" width="21.4707%" height="15" fill="rgb(252,49,23)" fg:x="13096" fg:w="4546"/><text x="62.1024%" y="271.50">__recvmsg</text></g><g><title>cerror (3 samples, 0.01%)</title><rect x="83.3089%" y="245" width="0.0142%" height="15" fill="rgb(215,19,7)" fg:x="17639" fg:w="3"/><text x="83.5589%" y="255.50"></text></g><g><title>&lt;quinn::runtime::tokio::UdpSocket as quinn::runtime::AsyncUdpSocket&gt;::poll_recv (5,047 samples, 23.84%)</title><rect x="59.5050%" y="309" width="23.8370%" height="15" fill="rgb(238,81,41)" fg:x="12599" fg:w="5047"/><text x="59.7550%" y="319.50">&lt;quinn::runtime::tokio::UdpSocket as q..</text></g><g><title>tokio::runtime::io::registration::Registration::try_io (4,993 samples, 23.58%)</title><rect x="59.7601%" y="293" width="23.5819%" height="15" fill="rgb(210,199,37)" fg:x="12653" fg:w="4993"/><text x="60.0101%" y="303.50">tokio::runtime::io::registration::Reg..</text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (3 samples, 0.01%)</title><rect x="83.4601%" y="293" width="0.0142%" height="15" fill="rgb(244,192,49)" fg:x="17671" fg:w="3"/><text x="83.7101%" y="303.50"></text></g><g><title>szone_malloc_should_clear (19 samples, 0.09%)</title><rect x="83.4742%" y="293" width="0.0897%" height="15" fill="rgb(226,211,11)" fg:x="17674" fg:w="19"/><text x="83.7242%" y="303.50"></text></g><g><title>tiny_malloc_should_clear (16 samples, 0.08%)</title><rect x="83.4884%" y="277" width="0.0756%" height="15" fill="rgb(236,162,54)" fg:x="17677" fg:w="16"/><text x="83.7384%" y="287.50"></text></g><g><title>tiny_malloc_from_free_list (7 samples, 0.03%)</title><rect x="83.5309%" y="261" width="0.0331%" height="15" fill="rgb(220,229,9)" fg:x="17686" fg:w="7"/><text x="83.7809%" y="271.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (46 samples, 0.22%)</title><rect x="83.3562%" y="309" width="0.2173%" height="15" fill="rgb(250,87,22)" fg:x="17649" fg:w="46"/><text x="83.6062%" y="319.50"></text></g><g><title>&lt;quinn_proto::cid_generator::HashedConnectionIdGenerator as quinn_proto::cid_generator::ConnectionIdGenerator&gt;::cid_len (3 samples, 0.01%)</title><rect x="83.7340%" y="293" width="0.0142%" height="15" fill="rgb(239,43,17)" fg:x="17729" fg:w="3"/><text x="83.9840%" y="303.50"></text></g><g><title>quinn_proto::endpoint::Endpoint::handle (68 samples, 0.32%)</title><rect x="83.5781%" y="309" width="0.3212%" height="15" fill="rgb(231,177,25)" fg:x="17696" fg:w="68"/><text x="83.8281%" y="319.50"></text></g><g><title>quinn_proto::packet::PartialDecode::new (31 samples, 0.15%)</title><rect x="83.7529%" y="293" width="0.1464%" height="15" fill="rgb(219,179,1)" fg:x="17733" fg:w="31"/><text x="84.0029%" y="303.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (8 samples, 0.04%)</title><rect x="83.9749%" y="293" width="0.0378%" height="15" fill="rgb(238,219,53)" fg:x="17780" fg:w="8"/><text x="84.2249%" y="303.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (3 samples, 0.01%)</title><rect x="83.9985%" y="277" width="0.0142%" height="15" fill="rgb(232,167,36)" fg:x="17785" fg:w="3"/><text x="84.2485%" y="287.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (9 samples, 0.04%)</title><rect x="84.0127%" y="293" width="0.0425%" height="15" fill="rgb(244,19,51)" fg:x="17788" fg:w="9"/><text x="84.2627%" y="303.50"></text></g><g><title>quinn::endpoint::RecvState::poll_socket (5,317 samples, 25.11%)</title><rect x="58.9808%" y="325" width="25.1122%" height="15" fill="rgb(224,6,22)" fg:x="12488" fg:w="5317"/><text x="59.2308%" y="335.50">quinn::endpoint::RecvState::poll_socket</text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (37 samples, 0.17%)</title><rect x="83.9182%" y="309" width="0.1748%" height="15" fill="rgb(224,145,5)" fg:x="17768" fg:w="37"/><text x="84.1682%" y="319.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (8 samples, 0.04%)</title><rect x="84.0552%" y="293" width="0.0378%" height="15" fill="rgb(234,130,49)" fg:x="17797" fg:w="8"/><text x="84.3052%" y="303.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (5 samples, 0.02%)</title><rect x="84.1024%" y="325" width="0.0236%" height="15" fill="rgb(254,6,2)" fg:x="17807" fg:w="5"/><text x="84.3524%" y="335.50"></text></g><g><title>mach_absolute_time (8 samples, 0.04%)</title><rect x="84.1402%" y="277" width="0.0378%" height="15" fill="rgb(208,96,46)" fg:x="17815" fg:w="8"/><text x="84.3902%" y="287.50"></text></g><g><title>clock_gettime_nsec_np (9 samples, 0.04%)</title><rect x="84.1402%" y="293" width="0.0425%" height="15" fill="rgb(239,3,39)" fg:x="17815" fg:w="9"/><text x="84.3902%" y="303.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (12 samples, 0.06%)</title><rect x="84.1307%" y="325" width="0.0567%" height="15" fill="rgb(233,210,1)" fg:x="17813" fg:w="12"/><text x="84.3807%" y="335.50"></text></g><g><title>clock_gettime (12 samples, 0.06%)</title><rect x="84.1307%" y="309" width="0.0567%" height="15" fill="rgb(244,137,37)" fg:x="17813" fg:w="12"/><text x="84.3807%" y="319.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (4 samples, 0.02%)</title><rect x="84.1969%" y="325" width="0.0189%" height="15" fill="rgb(240,136,2)" fg:x="17827" fg:w="4"/><text x="84.4469%" y="335.50"></text></g><g><title>&lt;tokio::task::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (5 samples, 0.02%)</title><rect x="84.2441%" y="309" width="0.0236%" height="15" fill="rgb(239,18,37)" fg:x="17837" fg:w="5"/><text x="84.4941%" y="319.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 0.02%)</title><rect x="84.2677%" y="309" width="0.0189%" height="15" fill="rgb(218,185,22)" fg:x="17842" fg:w="4"/><text x="84.5177%" y="319.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (6 samples, 0.03%)</title><rect x="84.2866%" y="309" width="0.0283%" height="15" fill="rgb(225,218,4)" fg:x="17846" fg:w="6"/><text x="84.5366%" y="319.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (25 samples, 0.12%)</title><rect x="84.2157%" y="325" width="0.1181%" height="15" fill="rgb(230,182,32)" fg:x="17831" fg:w="25"/><text x="84.4657%" y="335.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (4 samples, 0.02%)</title><rect x="84.3149%" y="309" width="0.0189%" height="15" fill="rgb(242,56,43)" fg:x="17852" fg:w="4"/><text x="84.5649%" y="319.50"></text></g><g><title>&lt;quinn::endpoint::EndpointDriver as core::future::future::Future&gt;::poll (5,386 samples, 25.44%)</title><rect x="58.9005%" y="341" width="25.4381%" height="15" fill="rgb(233,99,24)" fg:x="12471" fg:w="5386"/><text x="59.1505%" y="351.50">&lt;quinn::endpoint::EndpointDriver as core:..</text></g><g><title>_platform_memmove (10 samples, 0.05%)</title><rect x="84.4755%" y="293" width="0.0472%" height="15" fill="rgb(234,209,42)" fg:x="17886" fg:w="10"/><text x="84.7255%" y="303.50"></text></g><g><title>small_malloc_should_clear (10 samples, 0.05%)</title><rect x="84.5275%" y="277" width="0.0472%" height="15" fill="rgb(227,7,12)" fg:x="17897" fg:w="10"/><text x="84.7775%" y="287.50"></text></g><g><title>small_malloc_from_free_list (10 samples, 0.05%)</title><rect x="84.5275%" y="261" width="0.0472%" height="15" fill="rgb(245,203,43)" fg:x="17897" fg:w="10"/><text x="84.7775%" y="271.50"></text></g><g><title>small_free_list_remove_ptr_no_clear (4 samples, 0.02%)</title><rect x="84.5558%" y="245" width="0.0189%" height="15" fill="rgb(238,205,33)" fg:x="17903" fg:w="4"/><text x="84.8058%" y="255.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::convert::From&lt;&amp;[u8]&gt;&gt;::from (24 samples, 0.11%)</title><rect x="84.4661%" y="309" width="0.1134%" height="15" fill="rgb(231,56,7)" fg:x="17884" fg:w="24"/><text x="84.7161%" y="319.50"></text></g><g><title>szone_malloc_should_clear (12 samples, 0.06%)</title><rect x="84.5227%" y="293" width="0.0567%" height="15" fill="rgb(244,186,29)" fg:x="17896" fg:w="12"/><text x="84.7727%" y="303.50"></text></g><g><title>_platform_memmove (27 samples, 0.13%)</title><rect x="84.6692%" y="277" width="0.1275%" height="15" fill="rgb(234,111,31)" fg:x="17927" fg:w="27"/><text x="84.9192%" y="287.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (10 samples, 0.05%)</title><rect x="84.7967%" y="277" width="0.0472%" height="15" fill="rgb(241,149,10)" fg:x="17954" fg:w="10"/><text x="85.0467%" y="287.50"></text></g><g><title>_pthread_mutex_firstfit_wake (10 samples, 0.05%)</title><rect x="84.7967%" y="261" width="0.0472%" height="15" fill="rgb(249,206,44)" fg:x="17954" fg:w="10"/><text x="85.0467%" y="271.50"></text></g><g><title>__psynch_mutexdrop (10 samples, 0.05%)</title><rect x="84.7967%" y="245" width="0.0472%" height="15" fill="rgb(251,153,30)" fg:x="17954" fg:w="10"/><text x="85.0467%" y="255.50"></text></g><g><title>_free (4 samples, 0.02%)</title><rect x="84.8770%" y="261" width="0.0189%" height="15" fill="rgb(239,152,38)" fg:x="17971" fg:w="4"/><text x="85.1270%" y="271.50"></text></g><g><title>_szone_free (4 samples, 0.02%)</title><rect x="84.8959%" y="261" width="0.0189%" height="15" fill="rgb(249,139,47)" fg:x="17975" fg:w="4"/><text x="85.1459%" y="271.50"></text></g><g><title>small_free_list_add_ptr (4 samples, 0.02%)</title><rect x="84.9856%" y="245" width="0.0189%" height="15" fill="rgb(244,64,35)" fg:x="17994" fg:w="4"/><text x="85.2356%" y="255.50"></text></g><g><title>free_small (29 samples, 0.14%)</title><rect x="84.9147%" y="261" width="0.1370%" height="15" fill="rgb(216,46,15)" fg:x="17979" fg:w="29"/><text x="85.1647%" y="271.50"></text></g><g><title>small_free_list_remove_ptr_no_clear (7 samples, 0.03%)</title><rect x="85.0187%" y="245" width="0.0331%" height="15" fill="rgb(250,74,19)" fg:x="18001" fg:w="7"/><text x="85.2687%" y="255.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (44 samples, 0.21%)</title><rect x="84.8486%" y="277" width="0.2078%" height="15" fill="rgb(249,42,33)" fg:x="17965" fg:w="44"/><text x="85.0986%" y="287.50"></text></g><g><title>_platform_memset (3 samples, 0.01%)</title><rect x="85.1178%" y="261" width="0.0142%" height="15" fill="rgb(242,149,17)" fg:x="18022" fg:w="3"/><text x="85.3678%" y="271.50"></text></g><g><title>get_tiny_previous_free_msize (4 samples, 0.02%)</title><rect x="85.1556%" y="245" width="0.0189%" height="15" fill="rgb(244,29,21)" fg:x="18030" fg:w="4"/><text x="85.4056%" y="255.50"></text></g><g><title>free_tiny (28 samples, 0.13%)</title><rect x="85.0612%" y="277" width="0.1322%" height="15" fill="rgb(220,130,37)" fg:x="18010" fg:w="28"/><text x="85.3112%" y="287.50"></text></g><g><title>tiny_free_no_lock (13 samples, 0.06%)</title><rect x="85.1320%" y="261" width="0.0614%" height="15" fill="rgb(211,67,2)" fg:x="18025" fg:w="13"/><text x="85.3820%" y="271.50"></text></g><g><title>tiny_free_list_add_ptr (4 samples, 0.02%)</title><rect x="85.1745%" y="245" width="0.0189%" height="15" fill="rgb(235,68,52)" fg:x="18034" fg:w="4"/><text x="85.4245%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.01%)</title><rect x="85.1934%" y="277" width="0.0142%" height="15" fill="rgb(246,142,3)" fg:x="18038" fg:w="3"/><text x="85.4434%" y="287.50"></text></g><g><title>quinn_proto::connection::streams::recv::Chunks::finalize (4 samples, 0.02%)</title><rect x="85.2265%" y="277" width="0.0189%" height="15" fill="rgb(241,25,7)" fg:x="18045" fg:w="4"/><text x="85.4765%" y="287.50"></text></g><g><title>quinn_proto::connection::streams::recv::Chunks::finalize_inner (4 samples, 0.02%)</title><rect x="85.2265%" y="261" width="0.0189%" height="15" fill="rgb(242,119,39)" fg:x="18045" fg:w="4"/><text x="85.4765%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.01%)</title><rect x="85.2312%" y="245" width="0.0142%" height="15" fill="rgb(241,98,45)" fg:x="18046" fg:w="3"/><text x="85.4812%" y="255.50"></text></g><g><title>quinn_proto::connection::streams::recv::Chunks::new (8 samples, 0.04%)</title><rect x="85.2454%" y="277" width="0.0378%" height="15" fill="rgb(254,28,30)" fg:x="18049" fg:w="8"/><text x="85.4954%" y="287.50"></text></g><g><title>quinn_proto::connection::streams::recv::Chunks::next (27 samples, 0.13%)</title><rect x="85.2831%" y="277" width="0.1275%" height="15" fill="rgb(241,142,54)" fg:x="18057" fg:w="27"/><text x="85.5331%" y="287.50"></text></g><g><title>quinn_proto::connection::assembler::Assembler::read (25 samples, 0.12%)</title><rect x="85.2926%" y="261" width="0.1181%" height="15" fill="rgb(222,85,15)" fg:x="18059" fg:w="25"/><text x="85.5426%" y="271.50"></text></g><g><title>alloc::collections::binary_heap::PeekMut&lt;T,A&gt;::pop (16 samples, 0.08%)</title><rect x="85.3351%" y="245" width="0.0756%" height="15" fill="rgb(210,85,47)" fg:x="18068" fg:w="16"/><text x="85.5851%" y="255.50"></text></g><g><title>__psynch_mutexwait (7 samples, 0.03%)</title><rect x="85.4296%" y="245" width="0.0331%" height="15" fill="rgb(224,206,25)" fg:x="18088" fg:w="7"/><text x="85.6796%" y="255.50"></text></g><g><title>_pthread_mutex_firstfit_lock_slow (84 samples, 0.40%)</title><rect x="85.4154%" y="261" width="0.3967%" height="15" fill="rgb(243,201,19)" fg:x="18085" fg:w="84"/><text x="85.6654%" y="271.50"></text></g><g><title>_pthread_mutex_firstfit_lock_wait (74 samples, 0.35%)</title><rect x="85.4626%" y="245" width="0.3495%" height="15" fill="rgb(236,59,4)" fg:x="18095" fg:w="74"/><text x="85.7126%" y="255.50"></text></g><g><title>__psynch_mutexwait (73 samples, 0.34%)</title><rect x="85.4673%" y="229" width="0.3448%" height="15" fill="rgb(254,179,45)" fg:x="18096" fg:w="73"/><text x="85.7173%" y="239.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (87 samples, 0.41%)</title><rect x="85.4107%" y="277" width="0.4109%" height="15" fill="rgb(226,14,10)" fg:x="18084" fg:w="87"/><text x="85.6607%" y="287.50"></text></g><g><title>quinn::recv_stream::RecvStream::poll_read_buf (262 samples, 1.24%)</title><rect x="84.5983%" y="293" width="1.2374%" height="15" fill="rgb(244,27,41)" fg:x="17912" fg:w="262"/><text x="84.8483%" y="303.50"></text></g><g><title>tiny_free_no_lock (3 samples, 0.01%)</title><rect x="85.8216%" y="277" width="0.0142%" height="15" fill="rgb(235,35,32)" fg:x="18171" fg:w="3"/><text x="86.0716%" y="287.50"></text></g><g><title>&lt;quinn::recv_stream::Read as core::future::future::Future&gt;::poll (269 samples, 1.27%)</title><rect x="84.5794%" y="309" width="1.2705%" height="15" fill="rgb(218,68,31)" fg:x="17908" fg:w="269"/><text x="84.8294%" y="319.50"></text></g><g><title>quinn_proto::connection::streams::recv::Chunks::next (3 samples, 0.01%)</title><rect x="85.8357%" y="293" width="0.0142%" height="15" fill="rgb(207,120,37)" fg:x="18174" fg:w="3"/><text x="86.0857%" y="303.50"></text></g><g><title>_platform_memmove (3 samples, 0.01%)</title><rect x="85.8499%" y="309" width="0.0142%" height="15" fill="rgb(227,98,0)" fg:x="18177" fg:w="3"/><text x="86.0999%" y="319.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 0.02%)</title><rect x="85.8924%" y="293" width="0.0189%" height="15" fill="rgb(207,7,3)" fg:x="18186" fg:w="4"/><text x="86.1424%" y="303.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (4 samples, 0.02%)</title><rect x="85.9113%" y="293" width="0.0189%" height="15" fill="rgb(206,98,19)" fg:x="18190" fg:w="4"/><text x="86.1613%" y="303.50"></text></g><g><title>&lt;core::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (320 samples, 1.51%)</title><rect x="84.4283%" y="325" width="1.5114%" height="15" fill="rgb(217,5,26)" fg:x="17876" fg:w="320"/><text x="84.6783%" y="335.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (13 samples, 0.06%)</title><rect x="85.8782%" y="309" width="0.0614%" height="15" fill="rgb(235,190,38)" fg:x="18183" fg:w="13"/><text x="86.1282%" y="319.50"></text></g><g><title>anyhow::error::_&lt;impl anyhow::Error&gt;::construct (7 samples, 0.03%)</title><rect x="85.9538%" y="309" width="0.0331%" height="15" fill="rgb(247,86,24)" fg:x="18199" fg:w="7"/><text x="86.2038%" y="319.50"></text></g><g><title>szone_malloc_should_clear (5 samples, 0.02%)</title><rect x="85.9633%" y="293" width="0.0236%" height="15" fill="rgb(205,101,16)" fg:x="18201" fg:w="5"/><text x="86.2133%" y="303.50"></text></g><g><title>tiny_malloc_should_clear (5 samples, 0.02%)</title><rect x="85.9633%" y="277" width="0.0236%" height="15" fill="rgb(246,168,33)" fg:x="18201" fg:w="5"/><text x="86.2133%" y="287.50"></text></g><g><title>tiny_malloc_from_free_list (4 samples, 0.02%)</title><rect x="85.9680%" y="261" width="0.0189%" height="15" fill="rgb(231,114,1)" fg:x="18202" fg:w="4"/><text x="86.2180%" y="271.50"></text></g><g><title>_platform_memmove (37 samples, 0.17%)</title><rect x="86.0010%" y="293" width="0.1748%" height="15" fill="rgb(207,184,53)" fg:x="18209" fg:w="37"/><text x="86.2510%" y="303.50"></text></g><g><title>core::fmt::write (14 samples, 0.07%)</title><rect x="86.2183%" y="277" width="0.0661%" height="15" fill="rgb(224,95,51)" fg:x="18255" fg:w="14"/><text x="86.4683%" y="287.50"></text></g><g><title>core::fmt::num::imp::_&lt;impl u64&gt;::_fmt (6 samples, 0.03%)</title><rect x="86.2561%" y="261" width="0.0283%" height="15" fill="rgb(212,188,45)" fg:x="18263" fg:w="6"/><text x="86.5061%" y="271.50"></text></g><g><title>core::fmt::Formatter::pad_integral (3 samples, 0.01%)</title><rect x="86.2702%" y="245" width="0.0142%" height="15" fill="rgb(223,154,38)" fg:x="18266" fg:w="3"/><text x="86.5202%" y="255.50"></text></g><g><title>alloc::fmt::format::format_inner (27 samples, 0.13%)</title><rect x="86.1758%" y="293" width="0.1275%" height="15" fill="rgb(251,22,52)" fg:x="18246" fg:w="27"/><text x="86.4258%" y="303.50"></text></g><g><title>_malloc_zone_malloc (3 samples, 0.01%)</title><rect x="86.3080%" y="261" width="0.0142%" height="15" fill="rgb(229,209,22)" fg:x="18274" fg:w="3"/><text x="86.5580%" y="271.50"></text></g><g><title>anyhow::error::_&lt;impl anyhow::Error&gt;::construct (7 samples, 0.03%)</title><rect x="86.3033%" y="277" width="0.0331%" height="15" fill="rgb(234,138,34)" fg:x="18273" fg:w="7"/><text x="86.5533%" y="287.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.01%)</title><rect x="86.3222%" y="261" width="0.0142%" height="15" fill="rgb(212,95,11)" fg:x="18277" fg:w="3"/><text x="86.5722%" y="271.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.01%)</title><rect x="86.3222%" y="245" width="0.0142%" height="15" fill="rgb(240,179,47)" fg:x="18277" fg:w="3"/><text x="86.5722%" y="255.50"></text></g><g><title>anyhow::error::_&lt;impl anyhow::Error&gt;::msg (9 samples, 0.04%)</title><rect x="86.3033%" y="293" width="0.0425%" height="15" fill="rgb(240,163,11)" fg:x="18273" fg:w="9"/><text x="86.5533%" y="303.50"></text></g><g><title>moqt_core::modules::variable_bytes::read_bytes (79 samples, 0.37%)</title><rect x="85.9869%" y="309" width="0.3731%" height="15" fill="rgb(236,37,12)" fg:x="18206" fg:w="79"/><text x="86.2369%" y="319.50"></text></g><g><title>&lt;moqt_core::modules::messages::data_streams::subgroup_stream::Object as moqt_core::modules::messages::data_streams::DataStreams&gt;::depacketize (92 samples, 0.43%)</title><rect x="85.9444%" y="325" width="0.4345%" height="15" fill="rgb(232,164,16)" fg:x="18197" fg:w="92"/><text x="86.1944%" y="335.50"></text></g><g><title>moqt_core::modules::variable_integer::read_variable_integer (4 samples, 0.02%)</title><rect x="86.3600%" y="309" width="0.0189%" height="15" fill="rgb(244,205,15)" fg:x="18285" fg:w="4"/><text x="86.6100%" y="319.50"></text></g><g><title>&lt;tokio::sync::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (6 samples, 0.03%)</title><rect x="86.3836%" y="325" width="0.0283%" height="15" fill="rgb(223,117,47)" fg:x="18290" fg:w="6"/><text x="86.6336%" y="335.50"></text></g><g><title>&lt;tokio::util::trace::InstrumentedAsyncOp&lt;F&gt; as core::future::future::Future&gt;::poll (6 samples, 0.03%)</title><rect x="86.4119%" y="325" width="0.0283%" height="15" fill="rgb(244,107,35)" fg:x="18296" fg:w="6"/><text x="86.6619%" y="335.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_subscriber::registry::LookupSpan&gt;::span_data (3 samples, 0.01%)</title><rect x="86.4403%" y="309" width="0.0142%" height="15" fill="rgb(205,140,8)" fg:x="18302" fg:w="3"/><text x="86.6903%" y="319.50"></text></g><g><title>&lt;tracing_subscriber::filter::layer_filters::Filtered&lt;L,F,S&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (6 samples, 0.03%)</title><rect x="86.4403%" y="325" width="0.0283%" height="15" fill="rgb(228,84,46)" fg:x="18302" fg:w="6"/><text x="86.6903%" y="335.50"></text></g><g><title>tracing_subscriber::filter::env::EnvFilter::cares_about_span (3 samples, 0.01%)</title><rect x="86.4544%" y="309" width="0.0142%" height="15" fill="rgb(254,188,9)" fg:x="18305" fg:w="3"/><text x="86.7044%" y="319.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (3 samples, 0.01%)</title><rect x="86.4828%" y="293" width="0.0142%" height="15" fill="rgb(206,112,54)" fg:x="18311" fg:w="3"/><text x="86.7328%" y="303.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::exit (4 samples, 0.02%)</title><rect x="86.4828%" y="325" width="0.0189%" height="15" fill="rgb(216,84,49)" fg:x="18311" fg:w="4"/><text x="86.7328%" y="335.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (4 samples, 0.02%)</title><rect x="86.4828%" y="309" width="0.0189%" height="15" fill="rgb(214,194,35)" fg:x="18311" fg:w="4"/><text x="86.7328%" y="319.50"></text></g><g><title>_platform_memmove (65 samples, 0.31%)</title><rect x="86.5064%" y="325" width="0.3070%" height="15" fill="rgb(249,28,3)" fg:x="18316" fg:w="65"/><text x="86.7564%" y="335.50"></text></g><g><title>anyhow::error::_&lt;impl core::ops::drop::Drop for anyhow::Error&gt;::drop (4 samples, 0.02%)</title><rect x="86.8134%" y="325" width="0.0189%" height="15" fill="rgb(222,56,52)" fg:x="18381" fg:w="4"/><text x="87.0634%" y="335.50"></text></g><g><title>anyhow::error::object_drop (8 samples, 0.04%)</title><rect x="86.8417%" y="309" width="0.0378%" height="15" fill="rgb(245,217,50)" fg:x="18387" fg:w="8"/><text x="87.0917%" y="319.50"></text></g><g><title>free_tiny (7 samples, 0.03%)</title><rect x="86.8465%" y="293" width="0.0331%" height="15" fill="rgb(213,201,24)" fg:x="18388" fg:w="7"/><text x="87.0965%" y="303.50"></text></g><g><title>tiny_free_no_lock (5 samples, 0.02%)</title><rect x="86.8559%" y="277" width="0.0236%" height="15" fill="rgb(248,116,28)" fg:x="18390" fg:w="5"/><text x="87.1059%" y="287.50"></text></g><g><title>anyhow::error::object_drop (13 samples, 0.06%)</title><rect x="86.8323%" y="325" width="0.0614%" height="15" fill="rgb(219,72,43)" fg:x="18385" fg:w="13"/><text x="87.0823%" y="335.50"></text></g><g><title>free_tiny (3 samples, 0.01%)</title><rect x="86.8795%" y="309" width="0.0142%" height="15" fill="rgb(209,138,14)" fg:x="18395" fg:w="3"/><text x="87.1295%" y="319.50"></text></g><g><title>_platform_memmove (3 samples, 0.01%)</title><rect x="86.8937%" y="309" width="0.0142%" height="15" fill="rgb(222,18,33)" fg:x="18398" fg:w="3"/><text x="87.1437%" y="319.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (6 samples, 0.03%)</title><rect x="86.8937%" y="325" width="0.0283%" height="15" fill="rgb(213,199,7)" fg:x="18398" fg:w="6"/><text x="87.1437%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3 samples, 0.01%)</title><rect x="86.9079%" y="309" width="0.0142%" height="15" fill="rgb(250,110,10)" fg:x="18401" fg:w="3"/><text x="87.1579%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.01%)</title><rect x="86.9079%" y="293" width="0.0142%" height="15" fill="rgb(248,123,6)" fg:x="18401" fg:w="3"/><text x="87.1579%" y="303.50"></text></g><g><title>_realloc (3 samples, 0.01%)</title><rect x="86.9079%" y="277" width="0.0142%" height="15" fill="rgb(206,91,31)" fg:x="18401" fg:w="3"/><text x="87.1579%" y="287.50"></text></g><g><title>_malloc_zone_realloc (3 samples, 0.01%)</title><rect x="86.9079%" y="261" width="0.0142%" height="15" fill="rgb(211,154,13)" fg:x="18401" fg:w="3"/><text x="87.1579%" y="271.50"></text></g><g><title>szone_realloc (3 samples, 0.01%)</title><rect x="86.9079%" y="245" width="0.0142%" height="15" fill="rgb(225,148,7)" fg:x="18401" fg:w="3"/><text x="87.1579%" y="255.50"></text></g><g><title>_platform_memmove (3 samples, 0.01%)</title><rect x="86.9079%" y="229" width="0.0142%" height="15" fill="rgb(220,160,43)" fg:x="18401" fg:w="3"/><text x="87.1579%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;moqt_server::modules::server_processes::data_streams::datagram::receiver::DatagramObjectReceiver::add_to_buf::{{closure}}&gt; (3 samples, 0.01%)</title><rect x="86.9220%" y="325" width="0.0142%" height="15" fill="rgb(213,52,39)" fg:x="18404" fg:w="3"/><text x="87.1720%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;moqt_server::modules::server_processes::data_streams::subgroup_stream::receiver::SubgroupStreamObjectReceiver::receive_object::{{closure}}&gt; (4 samples, 0.02%)</title><rect x="86.9362%" y="325" width="0.0189%" height="15" fill="rgb(243,137,7)" fg:x="18407" fg:w="4"/><text x="87.1862%" y="335.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (6 samples, 0.03%)</title><rect x="86.9551%" y="309" width="0.0283%" height="15" fill="rgb(230,79,13)" fg:x="18411" fg:w="6"/><text x="87.2051%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mutex::MutexGuard&lt;bytes::bytes_mut::BytesMut&gt;&gt; (8 samples, 0.04%)</title><rect x="86.9551%" y="325" width="0.0378%" height="15" fill="rgb(247,105,23)" fg:x="18411" fg:w="8"/><text x="87.2051%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mutex::MutexGuard&lt;moqt_server::modules::moqt_client::MOQTClient&gt;&gt; (6 samples, 0.03%)</title><rect x="86.9929%" y="325" width="0.0283%" height="15" fill="rgb(223,179,41)" fg:x="18419" fg:w="6"/><text x="87.2429%" y="335.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (3 samples, 0.01%)</title><rect x="87.0070%" y="309" width="0.0142%" height="15" fill="rgb(218,9,34)" fg:x="18422" fg:w="3"/><text x="87.2570%" y="319.50"></text></g><g><title>free_small (7 samples, 0.03%)</title><rect x="87.0495%" y="325" width="0.0331%" height="15" fill="rgb(222,106,8)" fg:x="18431" fg:w="7"/><text x="87.2995%" y="335.50"></text></g><g><title>small_free_list_remove_ptr_no_clear (4 samples, 0.02%)</title><rect x="87.0637%" y="309" width="0.0189%" height="15" fill="rgb(211,220,0)" fg:x="18434" fg:w="4"/><text x="87.3137%" y="319.50"></text></g><g><title>__bzero (5 samples, 0.02%)</title><rect x="87.1109%" y="293" width="0.0236%" height="15" fill="rgb(229,52,16)" fg:x="18444" fg:w="5"/><text x="87.3609%" y="303.50"></text></g><g><title>szone_malloc_should_clear (7 samples, 0.03%)</title><rect x="87.1062%" y="325" width="0.0331%" height="15" fill="rgb(212,155,18)" fg:x="18443" fg:w="7"/><text x="87.3562%" y="335.50"></text></g><g><title>medium_malloc_should_clear (6 samples, 0.03%)</title><rect x="87.1109%" y="309" width="0.0283%" height="15" fill="rgb(242,21,14)" fg:x="18444" fg:w="6"/><text x="87.3609%" y="319.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (8 samples, 0.04%)</title><rect x="87.1960%" y="309" width="0.0378%" height="15" fill="rgb(222,19,48)" fg:x="18462" fg:w="8"/><text x="87.4460%" y="319.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5 samples, 0.02%)</title><rect x="87.2951%" y="277" width="0.0236%" height="15" fill="rgb(232,45,27)" fg:x="18483" fg:w="5"/><text x="87.5451%" y="287.50"></text></g><g><title>_tlv_get_addr (5 samples, 0.02%)</title><rect x="87.2951%" y="261" width="0.0236%" height="15" fill="rgb(249,103,42)" fg:x="18483" fg:w="5"/><text x="87.5451%" y="271.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (10 samples, 0.05%)</title><rect x="87.2810%" y="293" width="0.0472%" height="15" fill="rgb(246,81,33)" fg:x="18480" fg:w="10"/><text x="87.5310%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::util::trace::AsyncOpTracingCtx&gt; (4 samples, 0.02%)</title><rect x="87.3282%" y="293" width="0.0189%" height="15" fill="rgb(252,33,42)" fg:x="18490" fg:w="4"/><text x="87.5782%" y="303.50"></text></g><g><title>&lt;tokio::util::trace::InstrumentedAsyncOp&lt;F&gt; as core::future::future::Future&gt;::poll (33 samples, 0.16%)</title><rect x="87.2337%" y="309" width="0.1559%" height="15" fill="rgb(209,212,41)" fg:x="18470" fg:w="33"/><text x="87.4837%" y="319.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::acquire (9 samples, 0.04%)</title><rect x="87.3471%" y="293" width="0.0425%" height="15" fill="rgb(207,154,6)" fg:x="18494" fg:w="9"/><text x="87.5971%" y="303.50"></text></g><g><title>tracing::span::Span::in_scope (6 samples, 0.03%)</title><rect x="87.3613%" y="277" width="0.0283%" height="15" fill="rgb(223,64,47)" fg:x="18497" fg:w="6"/><text x="87.6113%" y="287.50"></text></g><g><title>_platform_memmove (3 samples, 0.01%)</title><rect x="87.3943%" y="309" width="0.0142%" height="15" fill="rgb(211,161,38)" fg:x="18504" fg:w="3"/><text x="87.6443%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mutex::Mutex&lt;bytes::bytes_mut::BytesMut&gt;::lock::{{closure}}::{{closure}}&gt; (5 samples, 0.02%)</title><rect x="87.4085%" y="309" width="0.0236%" height="15" fill="rgb(219,138,40)" fg:x="18507" fg:w="5"/><text x="87.6585%" y="319.50"></text></g><g><title>tokio::sync::mutex::Mutex&lt;T&gt;::lock::_{{closure}} (86 samples, 0.41%)</title><rect x="87.1535%" y="325" width="0.4062%" height="15" fill="rgb(241,228,46)" fg:x="18453" fg:w="86"/><text x="87.4035%" y="335.50"></text></g><g><title>tokio::util::trace::async_op (26 samples, 0.12%)</title><rect x="87.4368%" y="309" width="0.1228%" height="15" fill="rgb(223,209,38)" fg:x="18513" fg:w="26"/><text x="87.6868%" y="319.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (19 samples, 0.09%)</title><rect x="87.4699%" y="293" width="0.0897%" height="15" fill="rgb(236,164,45)" fg:x="18520" fg:w="19"/><text x="87.7199%" y="303.50"></text></g><g><title>tokio::util::trace::async_op (5 samples, 0.02%)</title><rect x="87.5644%" y="325" width="0.0236%" height="15" fill="rgb(231,15,5)" fg:x="18540" fg:w="5"/><text x="87.8144%" y="335.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (4 samples, 0.02%)</title><rect x="87.5691%" y="309" width="0.0189%" height="15" fill="rgb(252,35,15)" fg:x="18541" fg:w="4"/><text x="87.8191%" y="319.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (698 samples, 3.30%)</title><rect x="84.3480%" y="341" width="3.2967%" height="15" fill="rgb(248,181,18)" fg:x="17859" fg:w="698"/><text x="84.5980%" y="351.50">&lt;tr..</text></g><g><title>wtransport::endpoint::IncomingSessionFuture::accept::_{{closure}} (10 samples, 0.05%)</title><rect x="87.5974%" y="325" width="0.0472%" height="15" fill="rgb(233,39,42)" fg:x="18547" fg:w="10"/><text x="87.8474%" y="335.50"></text></g><g><title>quinn::incoming::Incoming::accept (10 samples, 0.05%)</title><rect x="87.5974%" y="309" width="0.0472%" height="15" fill="rgb(238,110,33)" fg:x="18547" fg:w="10"/><text x="87.8474%" y="319.50"></text></g><g><title>quinn::endpoint::EndpointInner::accept (10 samples, 0.05%)</title><rect x="87.5974%" y="293" width="0.0472%" height="15" fill="rgb(233,195,10)" fg:x="18547" fg:w="10"/><text x="87.8474%" y="303.50"></text></g><g><title>quinn_proto::endpoint::Endpoint::accept (9 samples, 0.04%)</title><rect x="87.6021%" y="277" width="0.0425%" height="15" fill="rgb(254,105,3)" fg:x="18548" fg:w="9"/><text x="87.8521%" y="287.50"></text></g><g><title>quinn_proto::endpoint::Endpoint::add_connection (7 samples, 0.03%)</title><rect x="87.6116%" y="261" width="0.0331%" height="15" fill="rgb(221,225,9)" fg:x="18550" fg:w="7"/><text x="87.8616%" y="271.50"></text></g><g><title>quinn_proto::connection::Connection::new (7 samples, 0.03%)</title><rect x="87.6116%" y="245" width="0.0331%" height="15" fill="rgb(224,227,45)" fg:x="18550" fg:w="7"/><text x="87.8616%" y="255.50"></text></g><g><title>quinn_proto::connection::streams::state::StreamsState::new (7 samples, 0.03%)</title><rect x="87.6116%" y="229" width="0.0331%" height="15" fill="rgb(229,198,43)" fg:x="18550" fg:w="7"/><text x="87.8616%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.03%)</title><rect x="87.6116%" y="213" width="0.0331%" height="15" fill="rgb(206,209,35)" fg:x="18550" fg:w="7"/><text x="87.8616%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.03%)</title><rect x="87.6163%" y="197" width="0.0283%" height="15" fill="rgb(245,195,53)" fg:x="18551" fg:w="6"/><text x="87.8663%" y="207.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_subscriber::registry::LookupSpan&gt;::span_data (3 samples, 0.01%)</title><rect x="87.6635%" y="325" width="0.0142%" height="15" fill="rgb(240,92,26)" fg:x="18561" fg:w="3"/><text x="87.9135%" y="335.50"></text></g><g><title>sharded_slab::page::slot::Slot&lt;T,C&gt;::release (5 samples, 0.02%)</title><rect x="87.6777%" y="325" width="0.0236%" height="15" fill="rgb(207,40,23)" fg:x="18564" fg:w="5"/><text x="87.9277%" y="335.50"></text></g><g><title>&lt;tracing_subscriber::filter::layer_filters::Filtered&lt;L,F,S&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_exit (20 samples, 0.09%)</title><rect x="87.6446%" y="341" width="0.0945%" height="15" fill="rgb(223,111,35)" fg:x="18557" fg:w="20"/><text x="87.8946%" y="351.50"></text></g><g><title>tracing_subscriber::filter::env::EnvFilter::cares_about_span (8 samples, 0.04%)</title><rect x="87.7013%" y="325" width="0.0378%" height="15" fill="rgb(229,147,28)" fg:x="18569" fg:w="8"/><text x="87.9513%" y="335.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_enter (5 samples, 0.02%)</title><rect x="87.7391%" y="341" width="0.0236%" height="15" fill="rgb(211,29,28)" fg:x="18577" fg:w="5"/><text x="87.9891%" y="351.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (21 samples, 0.10%)</title><rect x="87.8194%" y="325" width="0.0992%" height="15" fill="rgb(228,72,33)" fg:x="18594" fg:w="21"/><text x="88.0694%" y="335.50"></text></g><g><title>sharded_slab::pool::Pool&lt;T,C&gt;::get (14 samples, 0.07%)</title><rect x="87.8525%" y="309" width="0.0661%" height="15" fill="rgb(205,214,31)" fg:x="18601" fg:w="14"/><text x="88.1025%" y="319.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (8 samples, 0.04%)</title><rect x="87.9186%" y="325" width="0.0378%" height="15" fill="rgb(224,111,15)" fg:x="18615" fg:w="8"/><text x="88.1686%" y="335.50"></text></g><g><title>tracing_subscriber::filter::env::EnvFilter::on_enter (14 samples, 0.07%)</title><rect x="87.9564%" y="325" width="0.0661%" height="15" fill="rgb(253,21,26)" fg:x="18623" fg:w="14"/><text x="88.2064%" y="335.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enter (65 samples, 0.31%)</title><rect x="87.7722%" y="341" width="0.3070%" height="15" fill="rgb(245,139,43)" fg:x="18584" fg:w="65"/><text x="88.0222%" y="351.50"></text></g><g><title>tracing_subscriber::layer::context::Context&lt;S&gt;::if_enabled_for (12 samples, 0.06%)</title><rect x="88.0225%" y="325" width="0.0567%" height="15" fill="rgb(252,170,7)" fg:x="18637" fg:w="12"/><text x="88.2725%" y="335.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_subscriber::registry::LookupSpan&gt;::span_data (7 samples, 0.03%)</title><rect x="88.0461%" y="309" width="0.0331%" height="15" fill="rgb(231,118,14)" fg:x="18642" fg:w="7"/><text x="88.2961%" y="319.50"></text></g><g><title>sharded_slab::pool::Pool&lt;T,C&gt;::get (3 samples, 0.01%)</title><rect x="88.0650%" y="293" width="0.0142%" height="15" fill="rgb(238,83,0)" fg:x="18646" fg:w="3"/><text x="88.3150%" y="303.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (9 samples, 0.04%)</title><rect x="88.1028%" y="293" width="0.0425%" height="15" fill="rgb(221,39,39)" fg:x="18654" fg:w="9"/><text x="88.3528%" y="303.50"></text></g><g><title>sharded_slab::pool::Pool&lt;T,C&gt;::get (4 samples, 0.02%)</title><rect x="88.1264%" y="277" width="0.0189%" height="15" fill="rgb(222,119,46)" fg:x="18659" fg:w="4"/><text x="88.3764%" y="287.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (17 samples, 0.08%)</title><rect x="88.0933%" y="309" width="0.0803%" height="15" fill="rgb(222,165,49)" fg:x="18652" fg:w="17"/><text x="88.3433%" y="319.50"></text></g><g><title>tracing_subscriber::registry::sharded::Registry::start_close (6 samples, 0.03%)</title><rect x="88.1453%" y="293" width="0.0283%" height="15" fill="rgb(219,113,52)" fg:x="18663" fg:w="6"/><text x="88.3953%" y="303.50"></text></g><g><title>_tlv_get_addr (4 samples, 0.02%)</title><rect x="88.1547%" y="277" width="0.0189%" height="15" fill="rgb(214,7,15)" fg:x="18665" fg:w="4"/><text x="88.4047%" y="287.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (30 samples, 0.14%)</title><rect x="88.0839%" y="325" width="0.1417%" height="15" fill="rgb(235,32,4)" fg:x="18650" fg:w="30"/><text x="88.3339%" y="335.50"></text></g><g><title>tracing_core::dispatcher::get_default (5 samples, 0.02%)</title><rect x="88.2020%" y="309" width="0.0236%" height="15" fill="rgb(238,90,54)" fg:x="18675" fg:w="5"/><text x="88.4520%" y="319.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::exit (32 samples, 0.15%)</title><rect x="88.0792%" y="341" width="0.1511%" height="15" fill="rgb(213,208,19)" fg:x="18649" fg:w="32"/><text x="88.3292%" y="351.50"></text></g><g><title>_platform_memmove (7 samples, 0.03%)</title><rect x="88.2397%" y="341" width="0.0331%" height="15" fill="rgb(233,156,4)" fg:x="18683" fg:w="7"/><text x="88.4897%" y="351.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (3 samples, 0.01%)</title><rect x="88.3720%" y="325" width="0.0142%" height="15" fill="rgb(207,194,5)" fg:x="18711" fg:w="3"/><text x="88.6220%" y="335.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (4 samples, 0.02%)</title><rect x="88.4239%" y="309" width="0.0189%" height="15" fill="rgb(206,111,30)" fg:x="18722" fg:w="4"/><text x="88.6739%" y="319.50"></text></g><g><title>_platform_memmove (24 samples, 0.11%)</title><rect x="88.4428%" y="309" width="0.1134%" height="15" fill="rgb(243,70,54)" fg:x="18726" fg:w="24"/><text x="88.6928%" y="319.50"></text></g><g><title>moqt_server::modules::object_cache_storage::cache::subgroup_stream::SubgroupStreamsCache::get_next_object (44 samples, 0.21%)</title><rect x="88.4003%" y="325" width="0.2078%" height="15" fill="rgb(242,28,8)" fg:x="18717" fg:w="44"/><text x="88.6503%" y="335.50"></text></g><g><title>ttl_cache::TtlCache&lt;K,V,S&gt;::get (11 samples, 0.05%)</title><rect x="88.5562%" y="309" width="0.0520%" height="15" fill="rgb(219,106,18)" fg:x="18750" fg:w="11"/><text x="88.8062%" y="319.50"></text></g><g><title>moqt_server::modules::object_cache_storage::cache::subgroup_stream::SubgroupStreamsCache::insert_object (4 samples, 0.02%)</title><rect x="88.6081%" y="325" width="0.0189%" height="15" fill="rgb(244,222,10)" fg:x="18761" fg:w="4"/><text x="88.8581%" y="335.50"></text></g><g><title>ttl_cache::TtlCache&lt;K,V,S&gt;::insert (3 samples, 0.01%)</title><rect x="88.6129%" y="309" width="0.0142%" height="15" fill="rgb(236,179,52)" fg:x="18762" fg:w="3"/><text x="88.8629%" y="319.50"></text></g><g><title>&lt;tokio::task::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="88.6459%" y="309" width="0.0189%" height="15" fill="rgb(213,23,39)" fg:x="18769" fg:w="4"/><text x="88.8959%" y="319.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 0.02%)</title><rect x="88.6648%" y="309" width="0.0189%" height="15" fill="rgb(238,48,10)" fg:x="18773" fg:w="4"/><text x="88.9148%" y="319.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (4 samples, 0.02%)</title><rect x="88.6837%" y="309" width="0.0189%" height="15" fill="rgb(251,196,23)" fg:x="18777" fg:w="4"/><text x="88.9337%" y="319.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (19 samples, 0.09%)</title><rect x="88.6317%" y="325" width="0.0897%" height="15" fill="rgb(250,152,24)" fg:x="18766" fg:w="19"/><text x="88.8817%" y="335.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (4 samples, 0.02%)</title><rect x="88.7026%" y="309" width="0.0189%" height="15" fill="rgb(209,150,17)" fg:x="18781" fg:w="4"/><text x="88.9526%" y="319.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (3 samples, 0.01%)</title><rect x="88.7451%" y="245" width="0.0142%" height="15" fill="rgb(234,202,34)" fg:x="18790" fg:w="3"/><text x="88.9951%" y="255.50"></text></g><g><title>mio::waker::Waker::wake (3 samples, 0.01%)</title><rect x="88.7451%" y="229" width="0.0142%" height="15" fill="rgb(253,148,53)" fg:x="18790" fg:w="3"/><text x="88.9951%" y="239.50"></text></g><g><title>kevent (3 samples, 0.01%)</title><rect x="88.7451%" y="213" width="0.0142%" height="15" fill="rgb(218,129,16)" fg:x="18790" fg:w="3"/><text x="88.9951%" y="223.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (4 samples, 0.02%)</title><rect x="88.7593%" y="245" width="0.0189%" height="15" fill="rgb(216,85,19)" fg:x="18793" fg:w="4"/><text x="89.0093%" y="255.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (9 samples, 0.04%)</title><rect x="88.7451%" y="261" width="0.0425%" height="15" fill="rgb(235,228,7)" fg:x="18790" fg:w="9"/><text x="88.9951%" y="271.50"></text></g><g><title>moqt_server::modules::object_cache_storage::storage::object_cache_storage::_{{closure}} (109 samples, 0.51%)</title><rect x="88.2775%" y="341" width="0.5148%" height="15" fill="rgb(245,175,0)" fg:x="18691" fg:w="109"/><text x="88.5275%" y="351.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (15 samples, 0.07%)</title><rect x="88.7215%" y="325" width="0.0708%" height="15" fill="rgb(208,168,36)" fg:x="18785" fg:w="15"/><text x="88.9715%" y="335.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (13 samples, 0.06%)</title><rect x="88.7309%" y="309" width="0.0614%" height="15" fill="rgb(246,171,24)" fg:x="18787" fg:w="13"/><text x="88.9809%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (12 samples, 0.06%)</title><rect x="88.7357%" y="293" width="0.0567%" height="15" fill="rgb(215,142,24)" fg:x="18788" fg:w="12"/><text x="88.9857%" y="303.50"></text></g><g><title>tokio::runtime::context::with_scheduler (11 samples, 0.05%)</title><rect x="88.7404%" y="277" width="0.0520%" height="15" fill="rgb(250,187,7)" fg:x="18789" fg:w="11"/><text x="88.9904%" y="287.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (175 samples, 0.83%)</title><rect x="88.9246%" y="325" width="0.8265%" height="15" fill="rgb(228,66,33)" fg:x="18828" fg:w="175"/><text x="89.1746%" y="335.50"></text></g><g><title>DYLD-STUB$$memcpy (354 samples, 1.67%)</title><rect x="92.2212%" y="293" width="1.6719%" height="15" fill="rgb(234,215,21)" fg:x="19526" fg:w="354"/><text x="92.4712%" y="303.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (1,270 samples, 6.00%)</title><rect x="90.7429%" y="309" width="5.9982%" height="15" fill="rgb(222,191,20)" fg:x="19213" fg:w="1270"/><text x="90.9929%" y="319.50">&lt;bytes::..</text></g><g><title>_platform_memmove (603 samples, 2.85%)</title><rect x="93.8932%" y="293" width="2.8480%" height="15" fill="rgb(245,79,54)" fg:x="19880" fg:w="603"/><text x="94.1432%" y="303.50">_p..</text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::iter::traits::collect::Extend&lt;u8&gt;&gt;::extend (3 samples, 0.01%)</title><rect x="96.7411%" y="309" width="0.0142%" height="15" fill="rgb(240,10,37)" fg:x="20483" fg:w="3"/><text x="96.9911%" y="319.50"></text></g><g><title>_platform_memmove (51 samples, 0.24%)</title><rect x="96.7553%" y="309" width="0.2409%" height="15" fill="rgb(214,192,32)" fg:x="20486" fg:w="51"/><text x="97.0053%" y="319.50"></text></g><g><title>_platform_memmove (3 samples, 0.01%)</title><rect x="97.0009%" y="213" width="0.0142%" height="15" fill="rgb(209,36,54)" fg:x="20538" fg:w="3"/><text x="97.2509%" y="223.50"></text></g><g><title>&lt;moqt_core::modules::messages::data_streams::subgroup_stream::Object as moqt_core::modules::messages::data_streams::DataStreams&gt;::packetize (1,536 samples, 7.25%)</title><rect x="89.7653%" y="325" width="7.2545%" height="15" fill="rgb(220,10,11)" fg:x="19006" fg:w="1536"/><text x="90.0153%" y="335.50">&lt;moqt_core..</text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (5 samples, 0.02%)</title><rect x="96.9962%" y="309" width="0.0236%" height="15" fill="rgb(221,106,17)" fg:x="20537" fg:w="5"/><text x="97.2462%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (5 samples, 0.02%)</title><rect x="96.9962%" y="293" width="0.0236%" height="15" fill="rgb(251,142,44)" fg:x="20537" fg:w="5"/><text x="97.2462%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.02%)</title><rect x="96.9962%" y="277" width="0.0236%" height="15" fill="rgb(238,13,15)" fg:x="20537" fg:w="5"/><text x="97.2462%" y="287.50"></text></g><g><title>_realloc (5 samples, 0.02%)</title><rect x="96.9962%" y="261" width="0.0236%" height="15" fill="rgb(208,107,27)" fg:x="20537" fg:w="5"/><text x="97.2462%" y="271.50"></text></g><g><title>_malloc_zone_realloc (5 samples, 0.02%)</title><rect x="96.9962%" y="245" width="0.0236%" height="15" fill="rgb(205,136,37)" fg:x="20537" fg:w="5"/><text x="97.2462%" y="255.50"></text></g><g><title>szone_realloc (4 samples, 0.02%)</title><rect x="97.0009%" y="229" width="0.0189%" height="15" fill="rgb(250,205,27)" fg:x="20538" fg:w="4"/><text x="97.2509%" y="239.50"></text></g><g><title>&lt;tokio::task::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="97.1001%" y="309" width="0.0142%" height="15" fill="rgb(210,80,43)" fg:x="20559" fg:w="3"/><text x="97.3501%" y="319.50"></text></g><g><title>_szone_free (4 samples, 0.02%)</title><rect x="97.1284%" y="309" width="0.0189%" height="15" fill="rgb(247,160,36)" fg:x="20565" fg:w="4"/><text x="97.3784%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (9 samples, 0.04%)</title><rect x="97.1473%" y="309" width="0.0425%" height="15" fill="rgb(234,13,49)" fg:x="20569" fg:w="9"/><text x="97.3973%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::unsafe_cell::UnsafeCell&lt;core::option::Option&lt;core::result::Result&lt;core::option::Option&lt;(usize,moqt_core::modules::messages::data_streams::subgroup_stream::Object)&gt;,anyhow::Error&gt;&gt;&gt;&gt; (6 samples, 0.03%)</title><rect x="97.1615%" y="293" width="0.0283%" height="15" fill="rgb(234,122,0)" fg:x="20572" fg:w="6"/><text x="97.4115%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (3 samples, 0.01%)</title><rect x="97.1898%" y="309" width="0.0142%" height="15" fill="rgb(207,146,38)" fg:x="20578" fg:w="3"/><text x="97.4398%" y="319.50"></text></g><g><title>free_tiny (8 samples, 0.04%)</title><rect x="97.2040%" y="309" width="0.0378%" height="15" fill="rgb(207,177,25)" fg:x="20581" fg:w="8"/><text x="97.4540%" y="319.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6 samples, 0.03%)</title><rect x="97.2418%" y="309" width="0.0283%" height="15" fill="rgb(211,178,42)" fg:x="20589" fg:w="6"/><text x="97.4918%" y="319.50"></text></g><g><title>_tlv_get_addr (3 samples, 0.01%)</title><rect x="97.2559%" y="293" width="0.0142%" height="15" fill="rgb(230,69,54)" fg:x="20592" fg:w="3"/><text x="97.5059%" y="303.50"></text></g><g><title>&lt;tokio::sync::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (53 samples, 0.25%)</title><rect x="97.0340%" y="325" width="0.2503%" height="15" fill="rgb(214,135,41)" fg:x="20545" fg:w="53"/><text x="97.2840%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (4 samples, 0.02%)</title><rect x="97.3268%" y="309" width="0.0189%" height="15" fill="rgb(237,67,25)" fg:x="20607" fg:w="4"/><text x="97.5768%" y="319.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5 samples, 0.02%)</title><rect x="97.3457%" y="309" width="0.0236%" height="15" fill="rgb(222,189,50)" fg:x="20611" fg:w="5"/><text x="97.5957%" y="319.50"></text></g><g><title>_tlv_get_addr (3 samples, 0.01%)</title><rect x="97.3551%" y="293" width="0.0142%" height="15" fill="rgb(245,148,34)" fg:x="20613" fg:w="3"/><text x="97.6051%" y="303.50"></text></g><g><title>kevent (7 samples, 0.03%)</title><rect x="97.3835%" y="261" width="0.0331%" height="15" fill="rgb(222,29,6)" fg:x="20619" fg:w="7"/><text x="97.6335%" y="271.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (27 samples, 0.13%)</title><rect x="97.3835%" y="277" width="0.1275%" height="15" fill="rgb(221,189,43)" fg:x="20619" fg:w="27"/><text x="97.6335%" y="287.50"></text></g><g><title>mio::waker::Waker::wake (20 samples, 0.09%)</title><rect x="97.4165%" y="261" width="0.0945%" height="15" fill="rgb(207,36,27)" fg:x="20626" fg:w="20"/><text x="97.6665%" y="271.50"></text></g><g><title>kevent (20 samples, 0.09%)</title><rect x="97.4165%" y="245" width="0.0945%" height="15" fill="rgb(217,90,24)" fg:x="20626" fg:w="20"/><text x="97.6665%" y="255.50"></text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::reregister (32 samples, 0.15%)</title><rect x="97.3787%" y="293" width="0.1511%" height="15" fill="rgb(224,66,35)" fg:x="20618" fg:w="32"/><text x="97.6287%" y="303.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::reset (4 samples, 0.02%)</title><rect x="97.5299%" y="293" width="0.0189%" height="15" fill="rgb(221,13,50)" fg:x="20650" fg:w="4"/><text x="97.7799%" y="303.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::poll_elapsed (44 samples, 0.21%)</title><rect x="97.3693%" y="309" width="0.2078%" height="15" fill="rgb(236,68,49)" fg:x="20616" fg:w="44"/><text x="97.6193%" y="319.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (6 samples, 0.03%)</title><rect x="97.5488%" y="293" width="0.0283%" height="15" fill="rgb(229,146,28)" fg:x="20654" fg:w="6"/><text x="97.7988%" y="303.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (4 samples, 0.02%)</title><rect x="97.5582%" y="277" width="0.0189%" height="15" fill="rgb(225,31,38)" fg:x="20656" fg:w="4"/><text x="97.8082%" y="287.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (63 samples, 0.30%)</title><rect x="97.2890%" y="325" width="0.2975%" height="15" fill="rgb(250,208,3)" fg:x="20599" fg:w="63"/><text x="97.5390%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::time::entry::TimerEntry&gt; (4 samples, 0.02%)</title><rect x="97.5960%" y="325" width="0.0189%" height="15" fill="rgb(246,54,23)" fg:x="20664" fg:w="4"/><text x="97.8460%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::oneshot::Receiver&lt;core::result::Result&lt;core::option::Option&lt;(usize,moqt_core::modules::messages::data_streams::subgroup_stream::Object)&gt;,anyhow::Error&gt;&gt;&gt; (3 samples, 0.01%)</title><rect x="97.6196%" y="325" width="0.0142%" height="15" fill="rgb(243,76,11)" fg:x="20669" fg:w="3"/><text x="97.8696%" y="335.50"></text></g><g><title>free_medium (3 samples, 0.01%)</title><rect x="97.6716%" y="309" width="0.0142%" height="15" fill="rgb(245,21,50)" fg:x="20680" fg:w="3"/><text x="97.9216%" y="319.50"></text></g><g><title>_platform_memmove (33 samples, 0.16%)</title><rect x="97.7424%" y="229" width="0.1559%" height="15" fill="rgb(228,9,43)" fg:x="20695" fg:w="33"/><text x="97.9924%" y="239.50"></text></g><g><title>&lt;quinn_proto::connection::streams::send::ByteSlice as quinn_proto::connection::streams::send::BytesSource&gt;::pop_chunk (35 samples, 0.17%)</title><rect x="97.7377%" y="245" width="0.1653%" height="15" fill="rgb(208,100,47)" fg:x="20694" fg:w="35"/><text x="97.9877%" y="255.50"></text></g><g><title>quinn_proto::connection::streams::SendStream::write (48 samples, 0.23%)</title><rect x="97.6952%" y="277" width="0.2267%" height="15" fill="rgb(232,26,8)" fg:x="20685" fg:w="48"/><text x="97.9452%" y="287.50"></text></g><g><title>quinn_proto::connection::streams::send::Send::write (40 samples, 0.19%)</title><rect x="97.7330%" y="261" width="0.1889%" height="15" fill="rgb(216,166,38)" fg:x="20693" fg:w="40"/><text x="97.9830%" y="271.50"></text></g><g><title>moqt_server::modules::server_processes::data_streams::subgroup_stream::forwarder::SubgroupStreamObjectForwarder::send::_{{closure}} (58 samples, 0.27%)</title><rect x="97.6621%" y="325" width="0.2739%" height="15" fill="rgb(251,202,51)" fg:x="20678" fg:w="58"/><text x="97.9121%" y="335.50"></text></g><g><title>wtransport::stream::SendStream::write_all::_{{closure}} (53 samples, 0.25%)</title><rect x="97.6857%" y="309" width="0.2503%" height="15" fill="rgb(254,216,34)" fg:x="20683" fg:w="53"/><text x="97.9357%" y="319.50"></text></g><g><title>&lt;quinn::send_stream::WriteAll as core::future::future::Future&gt;::poll (52 samples, 0.25%)</title><rect x="97.6905%" y="293" width="0.2456%" height="15" fill="rgb(251,32,27)" fg:x="20684" fg:w="52"/><text x="97.9405%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.01%)</title><rect x="97.9786%" y="293" width="0.0142%" height="15" fill="rgb(208,127,28)" fg:x="20745" fg:w="3"/><text x="98.2286%" y="303.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (9 samples, 0.04%)</title><rect x="97.9597%" y="309" width="0.0425%" height="15" fill="rgb(224,137,22)" fg:x="20741" fg:w="9"/><text x="98.2097%" y="319.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (4 samples, 0.02%)</title><rect x="98.0400%" y="245" width="0.0189%" height="15" fill="rgb(254,70,32)" fg:x="20758" fg:w="4"/><text x="98.2900%" y="255.50"></text></g><g><title>pthread_cond_signal (4 samples, 0.02%)</title><rect x="98.0400%" y="229" width="0.0189%" height="15" fill="rgb(229,75,37)" fg:x="20758" fg:w="4"/><text x="98.2900%" y="239.50"></text></g><g><title>__psynch_cvsignal (4 samples, 0.02%)</title><rect x="98.0400%" y="213" width="0.0189%" height="15" fill="rgb(252,64,23)" fg:x="20758" fg:w="4"/><text x="98.2900%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (11 samples, 0.05%)</title><rect x="98.0163%" y="293" width="0.0520%" height="15" fill="rgb(232,162,48)" fg:x="20753" fg:w="11"/><text x="98.2663%" y="303.50"></text></g><g><title>tokio::runtime::context::with_scheduler (11 samples, 0.05%)</title><rect x="98.0163%" y="277" width="0.0520%" height="15" fill="rgb(246,160,12)" fg:x="20753" fg:w="11"/><text x="98.2663%" y="287.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (8 samples, 0.04%)</title><rect x="98.0305%" y="261" width="0.0378%" height="15" fill="rgb(247,166,0)" fg:x="20756" fg:w="8"/><text x="98.2805%" y="271.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (13 samples, 0.06%)</title><rect x="98.0116%" y="309" width="0.0614%" height="15" fill="rgb(249,219,21)" fg:x="20752" fg:w="13"/><text x="98.2616%" y="319.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::acquire (8 samples, 0.04%)</title><rect x="98.0730%" y="309" width="0.0378%" height="15" fill="rgb(205,209,3)" fg:x="20765" fg:w="8"/><text x="98.3230%" y="319.50"></text></g><g><title>tracing::span::Span::in_scope (6 samples, 0.03%)</title><rect x="98.0825%" y="293" width="0.0283%" height="15" fill="rgb(243,44,1)" fg:x="20767" fg:w="6"/><text x="98.3325%" y="303.50"></text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::send::_{{closure}} (36 samples, 0.17%)</title><rect x="97.9549%" y="325" width="0.1700%" height="15" fill="rgb(206,159,16)" fg:x="20740" fg:w="36"/><text x="98.2049%" y="335.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (9 samples, 0.04%)</title><rect x="98.1344%" y="309" width="0.0425%" height="15" fill="rgb(244,77,30)" fg:x="20778" fg:w="9"/><text x="98.3844%" y="319.50"></text></g><g><title>_malloc_zone_malloc (7 samples, 0.03%)</title><rect x="98.1816%" y="309" width="0.0331%" height="15" fill="rgb(218,69,12)" fg:x="20788" fg:w="7"/><text x="98.4316%" y="319.50"></text></g><g><title>szone_malloc_should_clear (14 samples, 0.07%)</title><rect x="98.2242%" y="309" width="0.0661%" height="15" fill="rgb(212,87,7)" fg:x="20797" fg:w="14"/><text x="98.4742%" y="319.50"></text></g><g><title>tiny_malloc_should_clear (13 samples, 0.06%)</title><rect x="98.2289%" y="293" width="0.0614%" height="15" fill="rgb(245,114,25)" fg:x="20798" fg:w="13"/><text x="98.4789%" y="303.50"></text></g><g><title>tiny_malloc_from_free_list (7 samples, 0.03%)</title><rect x="98.2572%" y="277" width="0.0331%" height="15" fill="rgb(210,61,42)" fg:x="20804" fg:w="7"/><text x="98.5072%" y="287.50"></text></g><g><title>tokio::sync::oneshot::channel (39 samples, 0.18%)</title><rect x="98.1250%" y="325" width="0.1842%" height="15" fill="rgb(211,52,33)" fg:x="20776" fg:w="39"/><text x="98.3750%" y="335.50"></text></g><g><title>szone_malloc_type_malloc (4 samples, 0.02%)</title><rect x="98.2903%" y="309" width="0.0189%" height="15" fill="rgb(234,58,33)" fg:x="20811" fg:w="4"/><text x="98.5403%" y="319.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (3 samples, 0.01%)</title><rect x="98.3092%" y="309" width="0.0142%" height="15" fill="rgb(220,115,36)" fg:x="20815" fg:w="3"/><text x="98.5592%" y="319.50"></text></g><g><title>clock_gettime (3 samples, 0.01%)</title><rect x="98.3092%" y="293" width="0.0142%" height="15" fill="rgb(243,153,54)" fg:x="20815" fg:w="3"/><text x="98.5592%" y="303.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (3 samples, 0.01%)</title><rect x="98.3564%" y="293" width="0.0142%" height="15" fill="rgb(251,47,18)" fg:x="20825" fg:w="3"/><text x="98.6064%" y="303.50"></text></g><g><title>clock_gettime (3 samples, 0.01%)</title><rect x="98.3564%" y="277" width="0.0142%" height="15" fill="rgb(242,102,42)" fg:x="20825" fg:w="3"/><text x="98.6064%" y="287.50"></text></g><g><title>clock_gettime_nsec_np (3 samples, 0.01%)</title><rect x="98.3564%" y="261" width="0.0142%" height="15" fill="rgb(234,31,38)" fg:x="20825" fg:w="3"/><text x="98.6064%" y="271.50"></text></g><g><title>moqt_server::modules::server_processes::data_streams::subgroup_stream::forwarder::SubgroupStreamObjectForwarder::start::_{{closure}} (2,030 samples, 9.59%)</title><rect x="88.8018%" y="341" width="9.5877%" height="15" fill="rgb(221,117,51)" fg:x="18802" fg:w="2030"/><text x="89.0518%" y="351.50">moqt_server::m..</text></g><g><title>tokio::time::sleep::sleep (17 samples, 0.08%)</title><rect x="98.3092%" y="325" width="0.0803%" height="15" fill="rgb(212,20,18)" fg:x="20815" fg:w="17"/><text x="98.5592%" y="335.50"></text></g><g><title>tokio::time::sleep::Sleep::new_timeout (14 samples, 0.07%)</title><rect x="98.3233%" y="309" width="0.0661%" height="15" fill="rgb(245,133,36)" fg:x="20818" fg:w="14"/><text x="98.5733%" y="319.50"></text></g><g><title>tracing::span::Span::in_scope (3 samples, 0.01%)</title><rect x="98.3753%" y="293" width="0.0142%" height="15" fill="rgb(212,6,19)" fg:x="20829" fg:w="3"/><text x="98.6253%" y="303.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::enter (6 samples, 0.03%)</title><rect x="98.4131%" y="341" width="0.0283%" height="15" fill="rgb(218,1,36)" fg:x="20837" fg:w="6"/><text x="98.6631%" y="351.50"></text></g><g><title>tracing_core::event::Event::dispatch (3 samples, 0.01%)</title><rect x="98.4509%" y="341" width="0.0142%" height="15" fill="rgb(246,84,54)" fg:x="20845" fg:w="3"/><text x="98.7009%" y="351.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (3 samples, 0.01%)</title><rect x="98.4509%" y="325" width="0.0142%" height="15" fill="rgb(242,110,6)" fg:x="20845" fg:w="3"/><text x="98.7009%" y="335.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.01%)</title><rect x="98.4509%" y="309" width="0.0142%" height="15" fill="rgb(214,47,5)" fg:x="20845" fg:w="3"/><text x="98.7009%" y="319.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (16,815 samples, 79.42%)</title><rect x="19.0573%" y="357" width="79.4172%" height="15" fill="rgb(218,159,25)" fg:x="4035" fg:w="16815"/><text x="19.3073%" y="367.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;deduplicated_symbol&gt; (16,840 samples, 79.54%)</title><rect x="18.9581%" y="373" width="79.5353%" height="15" fill="rgb(215,211,28)" fg:x="4014" fg:w="16840"/><text x="19.2081%" y="383.50">&lt;deduplicated_symbol&gt;</text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (3 samples, 0.01%)</title><rect x="98.4792%" y="357" width="0.0142%" height="15" fill="rgb(238,59,32)" fg:x="20851" fg:w="3"/><text x="98.7292%" y="367.50"></text></g><g><title>kevent (14 samples, 0.07%)</title><rect x="98.5123%" y="309" width="0.0661%" height="15" fill="rgb(226,82,3)" fg:x="20858" fg:w="14"/><text x="98.7623%" y="319.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (113 samples, 0.53%)</title><rect x="98.5075%" y="325" width="0.5337%" height="15" fill="rgb(240,164,32)" fg:x="20857" fg:w="113"/><text x="98.7575%" y="335.50"></text></g><g><title>mio::waker::Waker::wake (98 samples, 0.46%)</title><rect x="98.5784%" y="309" width="0.4629%" height="15" fill="rgb(232,46,7)" fg:x="20872" fg:w="98"/><text x="98.8284%" y="319.50"></text></g><g><title>kevent (98 samples, 0.46%)</title><rect x="98.5784%" y="293" width="0.4629%" height="15" fill="rgb(229,129,53)" fg:x="20872" fg:w="98"/><text x="98.8284%" y="303.50"></text></g><g><title>__psynch_cvsignal (16 samples, 0.08%)</title><rect x="99.0601%" y="309" width="0.0756%" height="15" fill="rgb(234,188,29)" fg:x="20974" fg:w="16"/><text x="99.3101%" y="319.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (3 samples, 0.01%)</title><rect x="99.1404%" y="309" width="0.0142%" height="15" fill="rgb(246,141,4)" fg:x="20991" fg:w="3"/><text x="99.3904%" y="319.50"></text></g><g><title>pthread_cond_signal (109 samples, 0.51%)</title><rect x="99.1546%" y="309" width="0.5148%" height="15" fill="rgb(229,23,39)" fg:x="20994" fg:w="109"/><text x="99.4046%" y="319.50"></text></g><g><title>__psynch_cvsignal (106 samples, 0.50%)</title><rect x="99.1688%" y="293" width="0.5006%" height="15" fill="rgb(206,12,3)" fg:x="20997" fg:w="106"/><text x="99.4188%" y="303.50"></text></g><g><title>clock_gettime_nsec_np (19 samples, 0.09%)</title><rect x="99.6788%" y="277" width="0.0897%" height="15" fill="rgb(252,226,20)" fg:x="21105" fg:w="19"/><text x="99.9288%" y="287.50"></text></g><g><title>mach_absolute_time (18 samples, 0.09%)</title><rect x="99.6836%" y="261" width="0.0850%" height="15" fill="rgb(216,123,35)" fg:x="21106" fg:w="18"/><text x="99.9336%" y="271.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (155 samples, 0.73%)</title><rect x="99.0412%" y="325" width="0.7321%" height="15" fill="rgb(212,68,40)" fg:x="20970" fg:w="155"/><text x="99.2912%" y="335.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (22 samples, 0.10%)</title><rect x="99.6694%" y="309" width="0.1039%" height="15" fill="rgb(254,125,32)" fg:x="21103" fg:w="22"/><text x="99.9194%" y="319.50"></text></g><g><title>clock_gettime (21 samples, 0.10%)</title><rect x="99.6741%" y="293" width="0.0992%" height="15" fill="rgb(253,97,22)" fg:x="21104" fg:w="21"/><text x="99.9241%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (9 samples, 0.04%)</title><rect x="99.7733%" y="325" width="0.0425%" height="15" fill="rgb(241,101,14)" fg:x="21125" fg:w="9"/><text x="100.0233%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::yield_now (285 samples, 1.35%)</title><rect x="98.4934%" y="373" width="1.3461%" height="15" fill="rgb(238,103,29)" fg:x="20854" fg:w="285"/><text x="98.7434%" y="383.50"></text></g><g><title>tokio::runtime::context::with_scheduler (285 samples, 1.35%)</title><rect x="98.4934%" y="357" width="1.3461%" height="15" fill="rgb(233,195,47)" fg:x="20854" fg:w="285"/><text x="98.7434%" y="367.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (283 samples, 1.34%)</title><rect x="98.5028%" y="341" width="1.3366%" height="15" fill="rgb(246,218,30)" fg:x="20856" fg:w="283"/><text x="98.7528%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (5 samples, 0.02%)</title><rect x="99.8158%" y="325" width="0.0236%" height="15" fill="rgb(219,145,47)" fg:x="21134" fg:w="5"/><text x="100.0658%" y="335.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (9 samples, 0.04%)</title><rect x="99.8536%" y="373" width="0.0425%" height="15" fill="rgb(243,12,26)" fg:x="21142" fg:w="9"/><text x="100.1036%" y="383.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (17,156 samples, 81.03%)</title><rect x="18.8967%" y="389" width="81.0277%" height="15" fill="rgb(214,87,16)" fg:x="4001" fg:w="17156"/><text x="19.1467%" y="399.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::state::State::transition_to_running (6 samples, 0.03%)</title><rect x="99.8961%" y="373" width="0.0283%" height="15" fill="rgb(208,99,42)" fg:x="21151" fg:w="6"/><text x="100.1461%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (17,384 samples, 82.10%)</title><rect x="17.8388%" y="405" width="82.1046%" height="15" fill="rgb(253,99,2)" fg:x="3777" fg:w="17384"/><text x="18.0888%" y="415.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::task::raw::poll (4 samples, 0.02%)</title><rect x="99.9244%" y="389" width="0.0189%" height="15" fill="rgb(220,168,23)" fg:x="21157" fg:w="4"/><text x="100.1744%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_if_work_pending (11 samples, 0.05%)</title><rect x="99.9433%" y="405" width="0.0520%" height="15" fill="rgb(242,38,24)" fg:x="21161" fg:w="11"/><text x="100.1933%" y="415.50"></text></g><g><title>all (21,173 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(225,182,9)" fg:x="0" fg:w="21173"/><text x="0.2500%" y="623.50"></text></g><g><title>thread_start (21,164 samples, 99.96%)</title><rect x="0.0425%" y="597" width="99.9575%" height="15" fill="rgb(243,178,37)" fg:x="9" fg:w="21164"/><text x="0.2925%" y="607.50">thread_start</text></g><g><title>_pthread_start (21,164 samples, 99.96%)</title><rect x="0.0425%" y="581" width="99.9575%" height="15" fill="rgb(232,139,19)" fg:x="9" fg:w="21164"/><text x="0.2925%" y="591.50">_pthread_start</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (21,164 samples, 99.96%)</title><rect x="0.0425%" y="565" width="99.9575%" height="15" fill="rgb(225,201,24)" fg:x="9" fg:w="21164"/><text x="0.2925%" y="575.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (21,164 samples, 99.96%)</title><rect x="0.0425%" y="549" width="99.9575%" height="15" fill="rgb(221,47,46)" fg:x="9" fg:w="21164"/><text x="0.2925%" y="559.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (21,164 samples, 99.96%)</title><rect x="0.0425%" y="533" width="99.9575%" height="15" fill="rgb(249,23,13)" fg:x="9" fg:w="21164"/><text x="0.2925%" y="543.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (21,164 samples, 99.96%)</title><rect x="0.0425%" y="517" width="99.9575%" height="15" fill="rgb(219,9,5)" fg:x="9" fg:w="21164"/><text x="0.2925%" y="527.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (21,164 samples, 99.96%)</title><rect x="0.0425%" y="501" width="99.9575%" height="15" fill="rgb(254,171,16)" fg:x="9" fg:w="21164"/><text x="0.2925%" y="511.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (21,164 samples, 99.96%)</title><rect x="0.0425%" y="485" width="99.9575%" height="15" fill="rgb(230,171,20)" fg:x="9" fg:w="21164"/><text x="0.2925%" y="495.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (21,164 samples, 99.96%)</title><rect x="0.0425%" y="469" width="99.9575%" height="15" fill="rgb(210,71,41)" fg:x="9" fg:w="21164"/><text x="0.2925%" y="479.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (21,164 samples, 99.96%)</title><rect x="0.0425%" y="453" width="99.9575%" height="15" fill="rgb(206,173,20)" fg:x="9" fg:w="21164"/><text x="0.2925%" y="463.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (21,164 samples, 99.96%)</title><rect x="0.0425%" y="437" width="99.9575%" height="15" fill="rgb(233,88,34)" fg:x="9" fg:w="21164"/><text x="0.2925%" y="447.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (21,161 samples, 99.94%)</title><rect x="0.0567%" y="421" width="99.9433%" height="15" fill="rgb(223,209,46)" fg:x="12" fg:w="21161"/><text x="0.3067%" y="431.50">tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g></svg></svg>